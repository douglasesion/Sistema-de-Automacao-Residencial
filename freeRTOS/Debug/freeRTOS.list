
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000265c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080027e4  080027e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002834  08002834  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002834  08002834  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002834  08002834  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002838  08002838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800283c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00012da0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012dac  20012dac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000055bb  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001330  00000000  00000000  000255f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  00026928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000678  00000000  00000000  00027058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000516a  00000000  00000000  000276d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006f3a  00000000  00000000  0002c83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00060f05  00000000  00000000  00033774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00094679  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bf4  00000000  00000000  000946cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080027cc 	.word	0x080027cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080027cc 	.word	0x080027cc

080001c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f103 0208 	add.w	r2, r3, #8
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f04f 32ff 	mov.w	r2, #4294967295
 80001e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f103 0208 	add.w	r2, r3, #8
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f103 0208 	add.w	r2, r3, #8
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr

08000208 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2200      	movs	r2, #0
 8000214:	611a      	str	r2, [r3, #16]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000222:	b480      	push	{r7}
 8000224:	b085      	sub	sp, #20
 8000226:	af00      	add	r7, sp, #0
 8000228:	6078      	str	r0, [r7, #4]
 800022a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	68fa      	ldr	r2, [r7, #12]
 8000236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	689a      	ldr	r2, [r3, #8]
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	683a      	ldr	r2, [r7, #0]
 8000246:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	683a      	ldr	r2, [r7, #0]
 800024c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	1c5a      	adds	r2, r3, #1
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	601a      	str	r2, [r3, #0]
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr

0800026a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800026a:	b480      	push	{r7}
 800026c:	b085      	sub	sp, #20
 800026e:	af00      	add	r7, sp, #0
 8000270:	6078      	str	r0, [r7, #4]
 8000272:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000280:	d103      	bne.n	800028a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	691b      	ldr	r3, [r3, #16]
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	e00c      	b.n	80002a4 <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3308      	adds	r3, #8
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e002      	b.n	8000298 <vListInsert+0x2e>
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d2f6      	bcs.n	8000292 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	685a      	ldr	r2, [r3, #4]
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	683a      	ldr	r2, [r7, #0]
 80002b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	683a      	ldr	r2, [r7, #0]
 80002be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	1c5a      	adds	r2, r3, #1
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	601a      	str	r2, [r3, #0]
}
 80002d0:	bf00      	nop
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	691b      	ldr	r3, [r3, #16]
 80002e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	6892      	ldr	r2, [r2, #8]
 80002f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	6852      	ldr	r2, [r2, #4]
 80002fc:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	429a      	cmp	r2, r3
 8000306:	d103      	bne.n	8000310 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	689a      	ldr	r2, [r3, #8]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	1e5a      	subs	r2, r3, #1
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	681b      	ldr	r3, [r3, #0]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d102      	bne.n	800034a <xQueueGenericReset+0x1a>
 8000344:	f001 fe1e 	bl	8001f84 <ulPortSetInterruptMask>
 8000348:	e7fe      	b.n	8000348 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800034a:	f001 fde1 	bl	8001f10 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000356:	68f9      	ldr	r1, [r7, #12]
 8000358:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800035a:	fb01 f303 	mul.w	r3, r1, r3
 800035e:	441a      	add	r2, r3
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2200      	movs	r2, #0
 8000368:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800037a:	3b01      	subs	r3, #1
 800037c:	68f9      	ldr	r1, [r7, #12]
 800037e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000380:	fb01 f303 	mul.w	r3, r1, r3
 8000384:	441a      	add	r2, r3
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	f04f 32ff 	mov.w	r2, #4294967295
 8000390:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	f04f 32ff 	mov.w	r2, #4294967295
 8000398:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d10e      	bne.n	80003be <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d014      	beq.n	80003d2 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3310      	adds	r3, #16
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 fefd 	bl	80011ac <xTaskRemoveFromEventList>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d10c      	bne.n	80003d2 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80003b8:	f001 fd98 	bl	8001eec <vPortYield>
 80003bc:	e009      	b.n	80003d2 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	3310      	adds	r3, #16
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff00 	bl	80001c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	3324      	adds	r3, #36	; 0x24
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff fefb 	bl	80001c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80003d2:	f001 fdbd 	bl	8001f50 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80003d6:	2301      	movs	r3, #1
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	4613      	mov	r3, r2
 80003ec:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d02a      	beq.n	800044e <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 80003f8:	2054      	movs	r0, #84	; 0x54
 80003fa:	f001 fe5d 	bl	80020b8 <pvPortMalloc>
 80003fe:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8000400:	69bb      	ldr	r3, [r7, #24]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d023      	beq.n	800044e <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	68ba      	ldr	r2, [r7, #8]
 800040a:	fb02 f303 	mul.w	r3, r2, r3
 800040e:	3301      	adds	r3, #1
 8000410:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
 8000412:	6978      	ldr	r0, [r7, #20]
 8000414:	f001 fe50 	bl	80020b8 <pvPortMalloc>
 8000418:	4602      	mov	r2, r0
 800041a:	69bb      	ldr	r3, [r7, #24]
 800041c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d010      	beq.n	8000448 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8000426:	69bb      	ldr	r3, [r7, #24]
 8000428:	68fa      	ldr	r2, [r7, #12]
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 800042c:	69bb      	ldr	r3, [r7, #24]
 800042e:	68ba      	ldr	r2, [r7, #8]
 8000430:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000432:	2101      	movs	r1, #1
 8000434:	69b8      	ldr	r0, [r7, #24]
 8000436:	f7ff ff7b 	bl	8000330 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 800043a:	69bb      	ldr	r3, [r7, #24]
 800043c:	79fa      	ldrb	r2, [r7, #7]
 800043e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8000442:	69bb      	ldr	r3, [r7, #24]
 8000444:	61fb      	str	r3, [r7, #28]
 8000446:	e002      	b.n	800044e <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8000448:	69b8      	ldr	r0, [r7, #24]
 800044a:	f001 fe7b 	bl	8002144 <vPortFree>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d102      	bne.n	800045a <xQueueGenericCreate+0x7a>
 8000454:	f001 fd96 	bl	8001f84 <ulPortSetInterruptMask>
 8000458:	e7fe      	b.n	8000458 <xQueueGenericCreate+0x78>

	return xReturn;
 800045a:	69fb      	ldr	r3, [r7, #28]
}
 800045c:	4618      	mov	r0, r3
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08a      	sub	sp, #40	; 0x28
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
 8000470:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000472:	2300      	movs	r3, #0
 8000474:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800047a:	6a3b      	ldr	r3, [r7, #32]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d102      	bne.n	8000486 <xQueueGenericSend+0x22>
 8000480:	f001 fd80 	bl	8001f84 <ulPortSetInterruptMask>
 8000484:	e7fe      	b.n	8000484 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d103      	bne.n	8000494 <xQueueGenericSend+0x30>
 800048c:	6a3b      	ldr	r3, [r7, #32]
 800048e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000490:	2b00      	cmp	r3, #0
 8000492:	d101      	bne.n	8000498 <xQueueGenericSend+0x34>
 8000494:	2301      	movs	r3, #1
 8000496:	e000      	b.n	800049a <xQueueGenericSend+0x36>
 8000498:	2300      	movs	r3, #0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d102      	bne.n	80004a4 <xQueueGenericSend+0x40>
 800049e:	f001 fd71 	bl	8001f84 <ulPortSetInterruptMask>
 80004a2:	e7fe      	b.n	80004a2 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d103      	bne.n	80004b2 <xQueueGenericSend+0x4e>
 80004aa:	6a3b      	ldr	r3, [r7, #32]
 80004ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d101      	bne.n	80004b6 <xQueueGenericSend+0x52>
 80004b2:	2301      	movs	r3, #1
 80004b4:	e000      	b.n	80004b8 <xQueueGenericSend+0x54>
 80004b6:	2300      	movs	r3, #0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d102      	bne.n	80004c2 <xQueueGenericSend+0x5e>
 80004bc:	f001 fd62 	bl	8001f84 <ulPortSetInterruptMask>
 80004c0:	e7fe      	b.n	80004c0 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80004c2:	f001 f8cd 	bl	8001660 <xTaskGetSchedulerState>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d102      	bne.n	80004d2 <xQueueGenericSend+0x6e>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d101      	bne.n	80004d6 <xQueueGenericSend+0x72>
 80004d2:	2301      	movs	r3, #1
 80004d4:	e000      	b.n	80004d8 <xQueueGenericSend+0x74>
 80004d6:	2300      	movs	r3, #0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d102      	bne.n	80004e2 <xQueueGenericSend+0x7e>
 80004dc:	f001 fd52 	bl	8001f84 <ulPortSetInterruptMask>
 80004e0:	e7fe      	b.n	80004e0 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80004e2:	f001 fd15 	bl	8001f10 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80004e6:	6a3b      	ldr	r3, [r7, #32]
 80004e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004ea:	6a3b      	ldr	r3, [r7, #32]
 80004ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d302      	bcc.n	80004f8 <xQueueGenericSend+0x94>
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d11d      	bne.n	8000534 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80004f8:	683a      	ldr	r2, [r7, #0]
 80004fa:	68b9      	ldr	r1, [r7, #8]
 80004fc:	6a38      	ldr	r0, [r7, #32]
 80004fe:	f000 f9c2 	bl	8000886 <prvCopyDataToQueue>
 8000502:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000504:	6a3b      	ldr	r3, [r7, #32]
 8000506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00a      	beq.n	8000522 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800050c:	6a3b      	ldr	r3, [r7, #32]
 800050e:	3324      	adds	r3, #36	; 0x24
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fe4b 	bl	80011ac <xTaskRemoveFromEventList>
 8000516:	4603      	mov	r3, r0
 8000518:	2b01      	cmp	r3, #1
 800051a:	d107      	bne.n	800052c <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800051c:	f001 fce6 	bl	8001eec <vPortYield>
 8000520:	e004      	b.n	800052c <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000528:	f001 fce0 	bl	8001eec <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800052c:	f001 fd10 	bl	8001f50 <vPortExitCritical>
				return pdPASS;
 8000530:	2301      	movs	r3, #1
 8000532:	e056      	b.n	80005e2 <xQueueGenericSend+0x17e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d103      	bne.n	8000542 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800053a:	f001 fd09 	bl	8001f50 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800053e:	2300      	movs	r3, #0
 8000540:	e04f      	b.n	80005e2 <xQueueGenericSend+0x17e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000544:	2b00      	cmp	r3, #0
 8000546:	d106      	bne.n	8000556 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fe89 	bl	8001264 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000552:	2301      	movs	r3, #1
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000556:	f001 fcfb 	bl	8001f50 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800055a:	f000 fc19 	bl	8000d90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800055e:	f001 fcd7 	bl	8001f10 <vPortEnterCritical>
 8000562:	6a3b      	ldr	r3, [r7, #32]
 8000564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800056a:	d102      	bne.n	8000572 <xQueueGenericSend+0x10e>
 800056c:	6a3b      	ldr	r3, [r7, #32]
 800056e:	2200      	movs	r2, #0
 8000570:	645a      	str	r2, [r3, #68]	; 0x44
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057a:	d102      	bne.n	8000582 <xQueueGenericSend+0x11e>
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	2200      	movs	r2, #0
 8000580:	649a      	str	r2, [r3, #72]	; 0x48
 8000582:	f001 fce5 	bl	8001f50 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000586:	1d3a      	adds	r2, r7, #4
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4611      	mov	r1, r2
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fe82 	bl	8001298 <xTaskCheckForTimeOut>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d11d      	bne.n	80005d6 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800059a:	6a38      	ldr	r0, [r7, #32]
 800059c:	f000 fa6b 	bl	8000a76 <prvIsQueueFull>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d011      	beq.n	80005ca <xQueueGenericSend+0x166>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80005a6:	6a3b      	ldr	r3, [r7, #32]
 80005a8:	3310      	adds	r3, #16
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fd9e 	bl	80010f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80005b4:	6a38      	ldr	r0, [r7, #32]
 80005b6:	f000 f9fc 	bl	80009b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80005ba:	f000 fbf7 	bl	8000dac <xTaskResumeAll>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d18e      	bne.n	80004e2 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 80005c4:	f001 fc92 	bl	8001eec <vPortYield>
 80005c8:	e78b      	b.n	80004e2 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80005ca:	6a38      	ldr	r0, [r7, #32]
 80005cc:	f000 f9f1 	bl	80009b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80005d0:	f000 fbec 	bl	8000dac <xTaskResumeAll>
 80005d4:	e785      	b.n	80004e2 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80005d6:	6a38      	ldr	r0, [r7, #32]
 80005d8:	f000 f9eb 	bl	80009b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80005dc:	f000 fbe6 	bl	8000dac <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80005e0:	2300      	movs	r3, #0
		}
	}
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b088      	sub	sp, #32
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	607a      	str	r2, [r7, #4]
 80005f6:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d102      	bne.n	8000608 <xQueueGenericSendFromISR+0x1e>
 8000602:	f001 fcbf 	bl	8001f84 <ulPortSetInterruptMask>
 8000606:	e7fe      	b.n	8000606 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d103      	bne.n	8000616 <xQueueGenericSendFromISR+0x2c>
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <xQueueGenericSendFromISR+0x30>
 8000616:	2301      	movs	r3, #1
 8000618:	e000      	b.n	800061c <xQueueGenericSendFromISR+0x32>
 800061a:	2300      	movs	r3, #0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d102      	bne.n	8000626 <xQueueGenericSendFromISR+0x3c>
 8000620:	f001 fcb0 	bl	8001f84 <ulPortSetInterruptMask>
 8000624:	e7fe      	b.n	8000624 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	2b02      	cmp	r3, #2
 800062a:	d103      	bne.n	8000634 <xQueueGenericSendFromISR+0x4a>
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000630:	2b01      	cmp	r3, #1
 8000632:	d101      	bne.n	8000638 <xQueueGenericSendFromISR+0x4e>
 8000634:	2301      	movs	r3, #1
 8000636:	e000      	b.n	800063a <xQueueGenericSendFromISR+0x50>
 8000638:	2300      	movs	r3, #0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d102      	bne.n	8000644 <xQueueGenericSendFromISR+0x5a>
 800063e:	f001 fca1 	bl	8001f84 <ulPortSetInterruptMask>
 8000642:	e7fe      	b.n	8000642 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000644:	f001 fd0a 	bl	800205c <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000648:	f001 fc9c 	bl	8001f84 <ulPortSetInterruptMask>
 800064c:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000656:	429a      	cmp	r2, r3
 8000658:	d302      	bcc.n	8000660 <xQueueGenericSendFromISR+0x76>
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d12d      	bne.n	80006bc <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	68b9      	ldr	r1, [r7, #8]
 8000664:	69b8      	ldr	r0, [r7, #24]
 8000666:	f000 f90e 	bl	8000886 <prvCopyDataToQueue>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d005      	beq.n	800067c <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2201      	movs	r2, #1
 800067a:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000684:	d112      	bne.n	80006ac <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068a:	2b00      	cmp	r3, #0
 800068c:	d013      	beq.n	80006b6 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	3324      	adds	r3, #36	; 0x24
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fd8a 	bl	80011ac <xTaskRemoveFromEventList>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00b      	beq.n	80006b6 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d008      	beq.n	80006b6 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2201      	movs	r2, #1
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	e004      	b.n	80006b6 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61fb      	str	r3, [r7, #28]
 80006ba:	e001      	b.n	80006c0 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80006c0:	6978      	ldr	r0, [r7, #20]
 80006c2:	f001 fc68 	bl	8001f96 <vPortClearInterruptMask>

	return xReturn;
 80006c6:	69fb      	ldr	r3, [r7, #28]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80006e6:	6a3b      	ldr	r3, [r7, #32]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d102      	bne.n	80006f2 <xQueueGenericReceive+0x22>
 80006ec:	f001 fc4a 	bl	8001f84 <ulPortSetInterruptMask>
 80006f0:	e7fe      	b.n	80006f0 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d103      	bne.n	8000700 <xQueueGenericReceive+0x30>
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d101      	bne.n	8000704 <xQueueGenericReceive+0x34>
 8000700:	2301      	movs	r3, #1
 8000702:	e000      	b.n	8000706 <xQueueGenericReceive+0x36>
 8000704:	2300      	movs	r3, #0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d102      	bne.n	8000710 <xQueueGenericReceive+0x40>
 800070a:	f001 fc3b 	bl	8001f84 <ulPortSetInterruptMask>
 800070e:	e7fe      	b.n	800070e <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000710:	f000 ffa6 	bl	8001660 <xTaskGetSchedulerState>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d102      	bne.n	8000720 <xQueueGenericReceive+0x50>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d101      	bne.n	8000724 <xQueueGenericReceive+0x54>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <xQueueGenericReceive+0x56>
 8000724:	2300      	movs	r3, #0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d102      	bne.n	8000730 <xQueueGenericReceive+0x60>
 800072a:	f001 fc2b 	bl	8001f84 <ulPortSetInterruptMask>
 800072e:	e7fe      	b.n	800072e <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000730:	f001 fbee 	bl	8001f10 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000734:	6a3b      	ldr	r3, [r7, #32]
 8000736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000738:	2b00      	cmp	r3, #0
 800073a:	d03b      	beq.n	80007b4 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000742:	68b9      	ldr	r1, [r7, #8]
 8000744:	6a38      	ldr	r0, [r7, #32]
 8000746:	f000 f90b 	bl	8000960 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d11c      	bne.n	800078a <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000754:	1e5a      	subs	r2, r3, #1
 8000756:	6a3b      	ldr	r3, [r7, #32]
 8000758:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800075a:	6a3b      	ldr	r3, [r7, #32]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d104      	bne.n	800076c <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000762:	f000 ff6d 	bl	8001640 <xTaskGetCurrentTaskHandle>
 8000766:	4602      	mov	r2, r0
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d01b      	beq.n	80007ac <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	3310      	adds	r3, #16
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fd17 	bl	80011ac <xTaskRemoveFromEventList>
 800077e:	4603      	mov	r3, r0
 8000780:	2b01      	cmp	r3, #1
 8000782:	d113      	bne.n	80007ac <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8000784:	f001 fbb2 	bl	8001eec <vPortYield>
 8000788:	e010      	b.n	80007ac <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	69fa      	ldr	r2, [r7, #28]
 800078e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000794:	2b00      	cmp	r3, #0
 8000796:	d009      	beq.n	80007ac <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	3324      	adds	r3, #36	; 0x24
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fd05 	bl	80011ac <xTaskRemoveFromEventList>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80007a8:	f001 fba0 	bl	8001eec <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80007ac:	f001 fbd0 	bl	8001f50 <vPortExitCritical>
				return pdPASS;
 80007b0:	2301      	movs	r3, #1
 80007b2:	e064      	b.n	800087e <xQueueGenericReceive+0x1ae>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d103      	bne.n	80007c2 <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80007ba:	f001 fbc9 	bl	8001f50 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80007be:	2300      	movs	r3, #0
 80007c0:	e05d      	b.n	800087e <xQueueGenericReceive+0x1ae>
				}
				else if( xEntryTimeSet == pdFALSE )
 80007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d106      	bne.n	80007d6 <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fd49 	bl	8001264 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80007d2:	2301      	movs	r3, #1
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80007d6:	f001 fbbb 	bl	8001f50 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80007da:	f000 fad9 	bl	8000d90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80007de:	f001 fb97 	bl	8001f10 <vPortEnterCritical>
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ea:	d102      	bne.n	80007f2 <xQueueGenericReceive+0x122>
 80007ec:	6a3b      	ldr	r3, [r7, #32]
 80007ee:	2200      	movs	r2, #0
 80007f0:	645a      	str	r2, [r3, #68]	; 0x44
 80007f2:	6a3b      	ldr	r3, [r7, #32]
 80007f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007fa:	d102      	bne.n	8000802 <xQueueGenericReceive+0x132>
 80007fc:	6a3b      	ldr	r3, [r7, #32]
 80007fe:	2200      	movs	r2, #0
 8000800:	649a      	str	r2, [r3, #72]	; 0x48
 8000802:	f001 fba5 	bl	8001f50 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000806:	1d3a      	adds	r2, r7, #4
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fd42 	bl	8001298 <xTaskCheckForTimeOut>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d12b      	bne.n	8000872 <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800081a:	6a38      	ldr	r0, [r7, #32]
 800081c:	f000 f915 	bl	8000a4a <prvIsQueueEmpty>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d01f      	beq.n	8000866 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d108      	bne.n	8000840 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
 800082e:	f001 fb6f 	bl	8001f10 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	4618      	mov	r0, r3
 8000838:	f000 ff30 	bl	800169c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800083c:	f001 fb88 	bl	8001f50 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	3324      	adds	r3, #36	; 0x24
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fc51 	bl	80010f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800084e:	6a38      	ldr	r0, [r7, #32]
 8000850:	f000 f8af 	bl	80009b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000854:	f000 faaa 	bl	8000dac <xTaskResumeAll>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	f47f af68 	bne.w	8000730 <xQueueGenericReceive+0x60>
				{
					portYIELD_WITHIN_API();
 8000860:	f001 fb44 	bl	8001eec <vPortYield>
 8000864:	e764      	b.n	8000730 <xQueueGenericReceive+0x60>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000866:	6a38      	ldr	r0, [r7, #32]
 8000868:	f000 f8a3 	bl	80009b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800086c:	f000 fa9e 	bl	8000dac <xTaskResumeAll>
 8000870:	e75e      	b.n	8000730 <xQueueGenericReceive+0x60>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000872:	6a38      	ldr	r0, [r7, #32]
 8000874:	f000 f89d 	bl	80009b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000878:	f000 fa98 	bl	8000dac <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 800087c:	2300      	movs	r3, #0
		}
	}
}
 800087e:	4618      	mov	r0, r3
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10f      	bne.n	80008be <prvCopyDataToQueue+0x38>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d152      	bne.n	800094c <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				vTaskDecrementMutexHeldCount();
 80008a6:	f000 ffb1 	bl	800180c <vTaskDecrementMutexHeldCount>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 ff52 	bl	8001758 <xTaskPriorityDisinherit>
 80008b4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	e046      	b.n	800094c <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d119      	bne.n	80008f8 <prvCopyDataToQueue+0x72>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6898      	ldr	r0, [r3, #8]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	461a      	mov	r2, r3
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	f001 ff65 	bl	800279e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	689a      	ldr	r2, [r3, #8]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	441a      	add	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d32e      	bcc.n	800094c <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	e029      	b.n	800094c <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	68d8      	ldr	r0, [r3, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	461a      	mov	r2, r3
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	f001 ff4b 	bl	800279e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	68da      	ldr	r2, [r3, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	425b      	negs	r3, r3
 8000912:	441a      	add	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	685a      	ldr	r2, [r3, #4]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	425b      	negs	r3, r3
 800092e:	441a      	add	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d108      	bne.n	800094c <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800093e:	2b00      	cmp	r3, #0
 8000940:	d004      	beq.n	800094c <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000956:	697b      	ldr	r3, [r7, #20]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d019      	beq.n	80009a6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	68da      	ldr	r2, [r3, #12]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	441a      	add	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	429a      	cmp	r2, r3
 800098a:	d303      	bcc.n	8000994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68d9      	ldr	r1, [r3, #12]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	461a      	mov	r2, r3
 800099e:	6838      	ldr	r0, [r7, #0]
 80009a0:	f001 fefd 	bl	800279e <memcpy>
	else
	{
		/* A mutex was taken. */
		vTaskIncrementMutexHeldCount();
	}
}
 80009a4:	e001      	b.n	80009aa <prvCopyDataFromQueue+0x4a>
		vTaskIncrementMutexHeldCount();
 80009a6:	f000 ff1f 	bl	80017e8 <vTaskIncrementMutexHeldCount>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80009ba:	f001 faa9 	bl	8001f10 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80009be:	e012      	b.n	80009e6 <prvUnlockQueue+0x34>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d013      	beq.n	80009f0 <prvUnlockQueue+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3324      	adds	r3, #36	; 0x24
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fbed 	bl	80011ac <xTaskRemoveFromEventList>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <prvUnlockQueue+0x2a>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80009d8:	f000 fcae 	bl	8001338 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009e0:	1e5a      	subs	r2, r3, #1
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	dce8      	bgt.n	80009c0 <prvUnlockQueue+0xe>
 80009ee:	e000      	b.n	80009f2 <prvUnlockQueue+0x40>
					break;
 80009f0:	bf00      	nop
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80009fa:	f001 faa9 	bl	8001f50 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80009fe:	f001 fa87 	bl	8001f10 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000a02:	e012      	b.n	8000a2a <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d013      	beq.n	8000a34 <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3310      	adds	r3, #16
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fbcb 	bl	80011ac <xTaskRemoveFromEventList>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8000a1c:	f000 fc8c 	bl	8001338 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a24:	1e5a      	subs	r2, r3, #1
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	dce8      	bgt.n	8000a04 <prvUnlockQueue+0x52>
 8000a32:	e000      	b.n	8000a36 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
 8000a34:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000a3e:	f001 fa87 	bl	8001f50 <vPortExitCritical>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000a52:	f001 fa5d 	bl	8001f10 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d102      	bne.n	8000a64 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	e001      	b.n	8000a68 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000a68:	f001 fa72 	bl	8001f50 <vPortExitCritical>

	return xReturn;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b084      	sub	sp, #16
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000a7e:	f001 fa47 	bl	8001f10 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d102      	bne.n	8000a94 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	e001      	b.n	8000a98 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000a98:	f001 fa5a 	bl	8001f50 <vPortExitCritical>

	return xReturn;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	e014      	b.n	8000ae2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000ab8:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <vQueueAddToRegistry+0x50>)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10b      	bne.n	8000adc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <vQueueAddToRegistry+0x50>)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <vQueueAddToRegistry+0x50>)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8000ada:	e006      	b.n	8000aea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2b07      	cmp	r3, #7
 8000ae6:	d9e7      	bls.n	8000ab8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000028 	.word	0x20000028

08000afc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8000b0a:	f001 fa01 	bl	8001f10 <vPortEnterCritical>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b16:	d102      	bne.n	8000b1e <vQueueWaitForMessageRestricted+0x22>
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	645a      	str	r2, [r3, #68]	; 0x44
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b26:	d102      	bne.n	8000b2e <vQueueWaitForMessageRestricted+0x32>
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	649a      	str	r2, [r3, #72]	; 0x48
 8000b2e:	f001 fa0f 	bl	8001f50 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d105      	bne.n	8000b46 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3324      	adds	r3, #36	; 0x24
 8000b3e:	6839      	ldr	r1, [r7, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fb0b 	bl	800115c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f7ff ff33 	bl	80009b2 <prvUnlockQueue>
	}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	4613      	mov	r3, r2
 8000b62:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d102      	bne.n	8000b70 <xTaskGenericCreate+0x1c>
 8000b6a:	f001 fa0b 	bl	8001f84 <ulPortSetInterruptMask>
 8000b6e:	e7fe      	b.n	8000b6e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 8000b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d902      	bls.n	8000b7c <xTaskGenericCreate+0x28>
 8000b76:	f001 fa05 	bl	8001f84 <ulPortSetInterruptMask>
 8000b7a:	e7fe      	b.n	8000b7a <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fcf5 	bl	8001570 <prvAllocateTCBAndStack>
 8000b86:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d072      	beq.n	8000c74 <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	f023 0307 	bic.w	r3, r3, #7
 8000ba6:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( uint32_t ) pxTopOfStack & ( uint32_t ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <xTaskGenericCreate+0x64>
 8000bb2:	f001 f9e7 	bl	8001f84 <ulPortSetInterruptMask>
 8000bb6:	e7fe      	b.n	8000bb6 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	69b8      	ldr	r0, [r7, #24]
 8000bc4:	f000 fbd4 	bl	8001370 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	68f9      	ldr	r1, [r7, #12]
 8000bcc:	6978      	ldr	r0, [r7, #20]
 8000bce:	f001 f8c3 	bl	8001d58 <pxPortInitialiseStack>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8000bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8000be4:	f001 f994 	bl	8001f10 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <xTaskGenericCreate+0x150>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <xTaskGenericCreate+0x150>)
 8000bf0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <xTaskGenericCreate+0x154>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d109      	bne.n	8000c0e <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8000bfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ca8 <xTaskGenericCreate+0x154>)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c00:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <xTaskGenericCreate+0x150>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d10f      	bne.n	8000c28 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8000c08:	f000 fc00 	bl	800140c <prvInitialiseTaskLists>
 8000c0c:	e00c      	b.n	8000c28 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <xTaskGenericCreate+0x158>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d108      	bne.n	8000c28 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8000c16:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <xTaskGenericCreate+0x154>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d302      	bcc.n	8000c28 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 8000c22:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <xTaskGenericCreate+0x154>)
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	6013      	str	r3, [r2, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8000c28:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <xTaskGenericCreate+0x15c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	4a20      	ldr	r2, [pc, #128]	; (8000cb0 <xTaskGenericCreate+0x15c>)
 8000c30:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000c32:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <xTaskGenericCreate+0x15c>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <xTaskGenericCreate+0x160>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d903      	bls.n	8000c4e <xTaskGenericCreate+0xfa>
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <xTaskGenericCreate+0x160>)
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <xTaskGenericCreate+0x164>)
 8000c5c:	441a      	add	r2, r3
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	3304      	adds	r3, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4610      	mov	r0, r2
 8000c66:	f7ff fadc 	bl	8000222 <vListInsertEnd>

			xReturn = pdPASS;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8000c6e:	f001 f96f 	bl	8001f50 <vPortExitCritical>
 8000c72:	e002      	b.n	8000c7a <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d10b      	bne.n	8000c98 <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <xTaskGenericCreate+0x158>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d007      	beq.n	8000c98 <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <xTaskGenericCreate+0x154>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d901      	bls.n	8000c98 <xTaskGenericCreate+0x144>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8000c94:	f001 f92a 	bl	8001eec <vPortYield>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 8000c98:	69fb      	ldr	r3, [r7, #28]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3720      	adds	r7, #32
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000140 	.word	0x20000140
 8000ca8:	20000068 	.word	0x20000068
 8000cac:	2000014c 	.word	0x2000014c
 8000cb0:	2000015c 	.word	0x2000015c
 8000cb4:	20000148 	.word	0x20000148
 8000cb8:	2000006c 	.word	0x2000006c

08000cbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d019      	beq.n	8000d02 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <vTaskDelay+0x58>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <vTaskDelay+0x20>
 8000cd6:	f001 f955 	bl	8001f84 <ulPortSetInterruptMask>
 8000cda:	e7fe      	b.n	8000cda <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8000cdc:	f000 f858 	bl	8000d90 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <vTaskDelay+0x5c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <vTaskDelay+0x60>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3304      	adds	r3, #4
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff faf3 	bl	80002dc <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000cf6:	68b8      	ldr	r0, [r7, #8]
 8000cf8:	f000 fc04 	bl	8001504 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000cfc:	f000 f856 	bl	8000dac <xTaskResumeAll>
 8000d00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <vTaskDelay+0x50>
		{
			portYIELD_WITHIN_API();
 8000d08:	f001 f8f0 	bl	8001eec <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000160 	.word	0x20000160
 8000d18:	20000144 	.word	0x20000144
 8000d1c:	20000068 	.word	0x20000068

08000d20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8000d26:	2300      	movs	r3, #0
 8000d28:	9303      	str	r3, [sp, #12]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	2300      	movs	r3, #0
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2300      	movs	r3, #0
 8000d38:	2282      	movs	r2, #130	; 0x82
 8000d3a:	4911      	ldr	r1, [pc, #68]	; (8000d80 <vTaskStartScheduler+0x60>)
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <vTaskStartScheduler+0x64>)
 8000d3e:	f7ff ff09 	bl	8000b54 <xTaskGenericCreate>
 8000d42:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d102      	bne.n	8000d50 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 8000d4a:	f000 fd77 	bl	800183c <xTimerCreateTimerTask>
 8000d4e:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d10a      	bne.n	8000d6c <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8000d56:	f001 f915 	bl	8001f84 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <vTaskStartScheduler+0x68>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <vTaskStartScheduler+0x6c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000d66:	f001 f85b 	bl	8001e20 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8000d6a:	e005      	b.n	8000d78 <vTaskStartScheduler+0x58>
		configASSERT( xReturn );
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <vTaskStartScheduler+0x58>
 8000d72:	f001 f907 	bl	8001f84 <ulPortSetInterruptMask>
 8000d76:	e7fe      	b.n	8000d76 <vTaskStartScheduler+0x56>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	080027e4 	.word	0x080027e4
 8000d84:	08001351 	.word	0x08001351
 8000d88:	2000014c 	.word	0x2000014c
 8000d8c:	20000144 	.word	0x20000144

08000d90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <vTaskSuspendAll+0x18>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <vTaskSuspendAll+0x18>)
 8000d9c:	6013      	str	r3, [r2, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	20000160 	.word	0x20000160

08000dac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000db6:	4b38      	ldr	r3, [pc, #224]	; (8000e98 <xTaskResumeAll+0xec>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <xTaskResumeAll+0x18>
 8000dbe:	f001 f8e1 	bl	8001f84 <ulPortSetInterruptMask>
 8000dc2:	e7fe      	b.n	8000dc2 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000dc4:	f001 f8a4 	bl	8001f10 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000dc8:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <xTaskResumeAll+0xec>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	4a32      	ldr	r2, [pc, #200]	; (8000e98 <xTaskResumeAll+0xec>)
 8000dd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000dd2:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <xTaskResumeAll+0xec>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d156      	bne.n	8000e88 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000dda:	4b30      	ldr	r3, [pc, #192]	; (8000e9c <xTaskResumeAll+0xf0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d052      	beq.n	8000e88 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000de2:	e02f      	b.n	8000e44 <xTaskResumeAll+0x98>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000de4:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <xTaskResumeAll+0xf4>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	3318      	adds	r3, #24
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fa73 	bl	80002dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fa6e 	bl	80002dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <xTaskResumeAll+0xf8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d903      	bls.n	8000e14 <xTaskResumeAll+0x68>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	4a24      	ldr	r2, [pc, #144]	; (8000ea4 <xTaskResumeAll+0xf8>)
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <xTaskResumeAll+0xfc>)
 8000e22:	441a      	add	r2, r3
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	3304      	adds	r3, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	f7ff f9f9 	bl	8000222 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <xTaskResumeAll+0x100>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d302      	bcc.n	8000e44 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <xTaskResumeAll+0x104>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <xTaskResumeAll+0xf4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1cb      	bne.n	8000de4 <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <xTaskResumeAll+0x108>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d011      	beq.n	8000e78 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8000e54:	e00c      	b.n	8000e70 <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8000e56:	f000 f841 	bl	8000edc <xTaskIncrementTick>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <xTaskResumeAll+0x104>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <xTaskResumeAll+0x108>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <xTaskResumeAll+0x108>)
 8000e6e:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <xTaskResumeAll+0x108>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1ee      	bne.n	8000e56 <xTaskResumeAll+0xaa>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <xTaskResumeAll+0x104>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d103      	bne.n	8000e88 <xTaskResumeAll+0xdc>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000e84:	f001 f832 	bl	8001eec <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000e88:	f001 f862 	bl	8001f50 <vPortExitCritical>

	return xAlreadyYielded;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000160 	.word	0x20000160
 8000e9c:	20000140 	.word	0x20000140
 8000ea0:	20000100 	.word	0x20000100
 8000ea4:	20000148 	.word	0x20000148
 8000ea8:	2000006c 	.word	0x2000006c
 8000eac:	20000068 	.word	0x20000068
 8000eb0:	20000154 	.word	0x20000154
 8000eb4:	20000150 	.word	0x20000150

08000eb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8000ebe:	f001 f827 	bl	8001f10 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <xTaskGetTickCount+0x20>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8000ec8:	f001 f842 	bl	8001f50 <vPortExitCritical>

	return xTicks;
 8000ecc:	687b      	ldr	r3, [r7, #4]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000144 	.word	0x20000144

08000edc <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	; (8001020 <xTaskIncrementTick+0x144>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f040 8087 	bne.w	8000ffe <xTaskIncrementTick+0x122>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8000ef0:	4b4c      	ldr	r3, [pc, #304]	; (8001024 <xTaskIncrementTick+0x148>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a4b      	ldr	r2, [pc, #300]	; (8001024 <xTaskIncrementTick+0x148>)
 8000ef8:	6013      	str	r3, [r2, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8000efa:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <xTaskIncrementTick+0x148>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d118      	bne.n	8000f38 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
 8000f06:	4b48      	ldr	r3, [pc, #288]	; (8001028 <xTaskIncrementTick+0x14c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <xTaskIncrementTick+0x3a>
 8000f10:	f001 f838 	bl	8001f84 <ulPortSetInterruptMask>
 8000f14:	e7fe      	b.n	8000f14 <xTaskIncrementTick+0x38>
 8000f16:	4b44      	ldr	r3, [pc, #272]	; (8001028 <xTaskIncrementTick+0x14c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4b43      	ldr	r3, [pc, #268]	; (800102c <xTaskIncrementTick+0x150>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a41      	ldr	r2, [pc, #260]	; (8001028 <xTaskIncrementTick+0x14c>)
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4a41      	ldr	r2, [pc, #260]	; (800102c <xTaskIncrementTick+0x150>)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b41      	ldr	r3, [pc, #260]	; (8001030 <xTaskIncrementTick+0x154>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a3f      	ldr	r2, [pc, #252]	; (8001030 <xTaskIncrementTick+0x154>)
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	f000 fb5e 	bl	80015f4 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8000f38:	4b3e      	ldr	r3, [pc, #248]	; (8001034 <xTaskIncrementTick+0x158>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d34e      	bcc.n	8000fe0 <xTaskIncrementTick+0x104>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f42:	4b39      	ldr	r3, [pc, #228]	; (8001028 <xTaskIncrementTick+0x14c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <xTaskIncrementTick+0x74>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e000      	b.n	8000f52 <xTaskIncrementTick+0x76>
 8000f50:	2300      	movs	r3, #0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8000f56:	4b37      	ldr	r3, [pc, #220]	; (8001034 <xTaskIncrementTick+0x158>)
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	601a      	str	r2, [r3, #0]
						break;
 8000f5e:	e03f      	b.n	8000fe0 <xTaskIncrementTick+0x104>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000f60:	4b31      	ldr	r3, [pc, #196]	; (8001028 <xTaskIncrementTick+0x14c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d203      	bcs.n	8000f80 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8000f78:	4a2e      	ldr	r2, [pc, #184]	; (8001034 <xTaskIncrementTick+0x158>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
							break;
 8000f7e:	e02f      	b.n	8000fe0 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	3304      	adds	r3, #4
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff f9a9 	bl	80002dc <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d004      	beq.n	8000f9c <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	3318      	adds	r3, #24
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f9a0 	bl	80002dc <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <xTaskIncrementTick+0x15c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d903      	bls.n	8000fb0 <xTaskIncrementTick+0xd4>
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	4a22      	ldr	r2, [pc, #136]	; (8001038 <xTaskIncrementTick+0x15c>)
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4a1f      	ldr	r2, [pc, #124]	; (800103c <xTaskIncrementTick+0x160>)
 8000fbe:	441a      	add	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	f7ff f92b 	bl	8000222 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <xTaskIncrementTick+0x164>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3b3      	bcc.n	8000f42 <xTaskIncrementTick+0x66>
							{
								xSwitchRequired = pdTRUE;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000fde:	e7b0      	b.n	8000f42 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <xTaskIncrementTick+0x164>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe6:	4915      	ldr	r1, [pc, #84]	; (800103c <xTaskIncrementTick+0x160>)
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d907      	bls.n	8001008 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e004      	b.n	8001008 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <xTaskIncrementTick+0x168>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <xTaskIncrementTick+0x168>)
 8001006:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <xTaskIncrementTick+0x16c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8001010:	2301      	movs	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001014:	697b      	ldr	r3, [r7, #20]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000160 	.word	0x20000160
 8001024:	20000144 	.word	0x20000144
 8001028:	200000f8 	.word	0x200000f8
 800102c:	200000fc 	.word	0x200000fc
 8001030:	20000158 	.word	0x20000158
 8001034:	20000000 	.word	0x20000000
 8001038:	20000148 	.word	0x20000148
 800103c:	2000006c 	.word	0x2000006c
 8001040:	20000068 	.word	0x20000068
 8001044:	20000150 	.word	0x20000150
 8001048:	20000154 	.word	0x20000154

0800104c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <vTaskSwitchContext+0x90>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <vTaskSwitchContext+0x94>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001060:	e038      	b.n	80010d4 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <vTaskSwitchContext+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001068:	e00b      	b.n	8001082 <vTaskSwitchContext+0x36>
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <vTaskSwitchContext+0x98>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <vTaskSwitchContext+0x2c>
 8001072:	f000 ff87 	bl	8001f84 <ulPortSetInterruptMask>
 8001076:	e7fe      	b.n	8001076 <vTaskSwitchContext+0x2a>
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <vTaskSwitchContext+0x98>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3b01      	subs	r3, #1
 800107e:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <vTaskSwitchContext+0x98>)
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <vTaskSwitchContext+0x98>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4918      	ldr	r1, [pc, #96]	; (80010e8 <vTaskSwitchContext+0x9c>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0e8      	beq.n	800106a <vTaskSwitchContext+0x1e>
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <vTaskSwitchContext+0x98>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <vTaskSwitchContext+0x9c>)
 80010a6:	4413      	add	r3, r2
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3308      	adds	r3, #8
 80010bc:	429a      	cmp	r2, r3
 80010be:	d104      	bne.n	80010ca <vTaskSwitchContext+0x7e>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <vTaskSwitchContext+0xa0>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000160 	.word	0x20000160
 80010e0:	20000154 	.word	0x20000154
 80010e4:	20000148 	.word	0x20000148
 80010e8:	2000006c 	.word	0x2000006c
 80010ec:	20000068 	.word	0x20000068

080010f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <vTaskPlaceOnEventList+0x16>
 8001100:	f000 ff40 	bl	8001f84 <ulPortSetInterruptMask>
 8001104:	e7fe      	b.n	8001104 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <vTaskPlaceOnEventList+0x60>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3318      	adds	r3, #24
 800110c:	4619      	mov	r1, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff f8ab 	bl	800026a <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <vTaskPlaceOnEventList+0x60>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3304      	adds	r3, #4
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f8de 	bl	80002dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001126:	d107      	bne.n	8001138 <vTaskPlaceOnEventList+0x48>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <vTaskPlaceOnEventList+0x60>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3304      	adds	r3, #4
 800112e:	4619      	mov	r1, r3
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <vTaskPlaceOnEventList+0x64>)
 8001132:	f7ff f876 	bl	8000222 <vListInsertEnd>
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001136:	e007      	b.n	8001148 <vTaskPlaceOnEventList+0x58>
			xTimeToWake = xTickCount + xTicksToWait;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <vTaskPlaceOnEventList+0x68>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f000 f9de 	bl	8001504 <prvAddCurrentTaskToDelayedList>
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000068 	.word	0x20000068
 8001154:	2000012c 	.word	0x2000012c
 8001158:	20000144 	.word	0x20000144

0800115c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <vTaskPlaceOnEventListRestricted+0x16>
 800116c:	f000 ff0a 	bl	8001f84 <ulPortSetInterruptMask>
 8001170:	e7fe      	b.n	8001170 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <vTaskPlaceOnEventListRestricted+0x48>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3318      	adds	r3, #24
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff f851 	bl	8000222 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <vTaskPlaceOnEventListRestricted+0x48>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3304      	adds	r3, #4
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f8a8 	bl	80002dc <uxListRemove>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <vTaskPlaceOnEventListRestricted+0x4c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 f9b4 	bl	8001504 <prvAddCurrentTaskToDelayedList>
	}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000068 	.word	0x20000068
 80011a8:	20000144 	.word	0x20000144

080011ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <xTaskRemoveFromEventList+0x1c>
 80011c2:	f000 fedf 	bl	8001f84 <ulPortSetInterruptMask>
 80011c6:	e7fe      	b.n	80011c6 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	3318      	adds	r3, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f885 	bl	80002dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <xTaskRemoveFromEventList+0xa0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d11d      	bne.n	8001216 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3304      	adds	r3, #4
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f87c 	bl	80002dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <xTaskRemoveFromEventList+0xa4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d903      	bls.n	80011f8 <xTaskRemoveFromEventList+0x4c>
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	4a16      	ldr	r2, [pc, #88]	; (8001250 <xTaskRemoveFromEventList+0xa4>)
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4a13      	ldr	r2, [pc, #76]	; (8001254 <xTaskRemoveFromEventList+0xa8>)
 8001206:	441a      	add	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3304      	adds	r3, #4
 800120c:	4619      	mov	r1, r3
 800120e:	4610      	mov	r0, r2
 8001210:	f7ff f807 	bl	8000222 <vListInsertEnd>
 8001214:	e005      	b.n	8001222 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3318      	adds	r3, #24
 800121a:	4619      	mov	r1, r3
 800121c:	480e      	ldr	r0, [pc, #56]	; (8001258 <xTaskRemoveFromEventList+0xac>)
 800121e:	f7ff f800 	bl	8000222 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <xTaskRemoveFromEventList+0xb0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	429a      	cmp	r2, r3
 800122e:	d905      	bls.n	800123c <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001230:	2301      	movs	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <xTaskRemoveFromEventList+0xb4>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	e001      	b.n	8001240 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8001240:	68fb      	ldr	r3, [r7, #12]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000160 	.word	0x20000160
 8001250:	20000148 	.word	0x20000148
 8001254:	2000006c 	.word	0x2000006c
 8001258:	20000100 	.word	0x20000100
 800125c:	20000068 	.word	0x20000068
 8001260:	20000154 	.word	0x20000154

08001264 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <vTaskSetTimeOutState+0x14>
 8001272:	f000 fe87 	bl	8001f84 <ulPortSetInterruptMask>
 8001276:	e7fe      	b.n	8001276 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <vTaskSetTimeOutState+0x2c>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <vTaskSetTimeOutState+0x30>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	605a      	str	r2, [r3, #4]
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000158 	.word	0x20000158
 8001294:	20000144 	.word	0x20000144

08001298 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <xTaskCheckForTimeOut+0x16>
 80012a8:	f000 fe6c 	bl	8001f84 <ulPortSetInterruptMask>
 80012ac:	e7fe      	b.n	80012ac <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <xTaskCheckForTimeOut+0x22>
 80012b4:	f000 fe66 	bl	8001f84 <ulPortSetInterruptMask>
 80012b8:	e7fe      	b.n	80012b8 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 80012ba:	f000 fe29 	bl	8001f10 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <xTaskCheckForTimeOut+0x98>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d102      	bne.n	80012d4 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	e026      	b.n	8001322 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <xTaskCheckForTimeOut+0x9c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d007      	beq.n	80012f0 <xTaskCheckForTimeOut+0x58>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d302      	bcc.n	80012f0 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80012ea:	2301      	movs	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e018      	b.n	8001322 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	1ad2      	subs	r2, r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d20e      	bcs.n	800131e <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6859      	ldr	r1, [r3, #4]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1acb      	subs	r3, r1, r3
 800130c:	441a      	add	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffa6 	bl	8001264 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	e001      	b.n	8001322 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 800131e:	2301      	movs	r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001322:	f000 fe15 	bl	8001f50 <vPortExitCritical>

	return xReturn;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000144 	.word	0x20000144
 8001334:	20000158 	.word	0x20000158

08001338 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <vTaskMissedYield+0x14>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	20000154 	.word	0x20000154

08001350 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8001358:	f000 f898 	bl	800148c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <prvIdleTask+0x1c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d9f9      	bls.n	8001358 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001364:	f000 fdc2 	bl	8001eec <vPortYield>
		prvCheckTasksWaitingTermination();
 8001368:	e7f6      	b.n	8001358 <prvIdleTask+0x8>
 800136a:	bf00      	nop
 800136c:	2000006c 	.word	0x2000006c

08001370 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	e012      	b.n	80013aa <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	4413      	add	r3, r2
 800138a:	7819      	ldrb	r1, [r3, #0]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	4413      	add	r3, r2
 8001392:	3334      	adds	r3, #52	; 0x34
 8001394:	460a      	mov	r2, r1
 8001396:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	4413      	add	r3, r2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <prvInitialiseTCBVariables+0x42>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	d9e9      	bls.n	8001384 <prvInitialiseTCBVariables+0x14>
 80013b0:	e000      	b.n	80013b4 <prvInitialiseTCBVariables+0x44>
		{
			break;
 80013b2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d901      	bls.n	80013c6 <prvInitialiseTCBVariables+0x56>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80013c2:	2304      	movs	r3, #4
 80013c4:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	649a      	str	r2, [r3, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3304      	adds	r3, #4
 80013dc:	4618      	mov	r0, r3
 80013de:	f7fe ff13 	bl	8000208 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3318      	adds	r3, #24
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe ff0e 	bl	8000208 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f1c3 0205 	rsb	r2, r3, #5
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	e00c      	b.n	8001432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <prvInitialiseTaskLists+0x60>)
 8001424:	4413      	add	r3, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe fece 	bl	80001c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3301      	adds	r3, #1
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b04      	cmp	r3, #4
 8001436:	d9ef      	bls.n	8001418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <prvInitialiseTaskLists+0x64>)
 800143a:	f7fe fec5 	bl	80001c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <prvInitialiseTaskLists+0x68>)
 8001440:	f7fe fec2 	bl	80001c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <prvInitialiseTaskLists+0x6c>)
 8001446:	f7fe febf 	bl	80001c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <prvInitialiseTaskLists+0x70>)
 800144c:	f7fe febc 	bl	80001c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <prvInitialiseTaskLists+0x74>)
 8001452:	f7fe feb9 	bl	80001c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <prvInitialiseTaskLists+0x78>)
 8001458:	4a05      	ldr	r2, [pc, #20]	; (8001470 <prvInitialiseTaskLists+0x64>)
 800145a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <prvInitialiseTaskLists+0x7c>)
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <prvInitialiseTaskLists+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000006c 	.word	0x2000006c
 8001470:	200000d0 	.word	0x200000d0
 8001474:	200000e4 	.word	0x200000e4
 8001478:	20000100 	.word	0x20000100
 800147c:	20000114 	.word	0x20000114
 8001480:	2000012c 	.word	0x2000012c
 8001484:	200000f8 	.word	0x200000f8
 8001488:	200000fc 	.word	0x200000fc

0800148c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8001492:	e028      	b.n	80014e6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001494:	f7ff fc7c 	bl	8000d90 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <prvCheckTasksWaitingTermination+0x6c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80014a8:	f7ff fc80 	bl	8000dac <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d119      	bne.n	80014e6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80014b2:	f000 fd2d 	bl	8001f10 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <prvCheckTasksWaitingTermination+0x6c>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	3304      	adds	r3, #4
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ff0a 	bl	80002dc <uxListRemove>
					--uxCurrentNumberOfTasks;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <prvCheckTasksWaitingTermination+0x70>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <prvCheckTasksWaitingTermination+0x70>)
 80014d0:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <prvCheckTasksWaitingTermination+0x74>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	4a09      	ldr	r2, [pc, #36]	; (8001500 <prvCheckTasksWaitingTermination+0x74>)
 80014da:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80014dc:	f000 fd38 	bl	8001f50 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80014e0:	6838      	ldr	r0, [r7, #0]
 80014e2:	f000 f876 	bl	80015d2 <prvDeleteTCB>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <prvCheckTasksWaitingTermination+0x74>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1d2      	bne.n	8001494 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000114 	.word	0x20000114
 80014fc:	20000140 	.word	0x20000140
 8001500:	20000128 	.word	0x20000128

08001504 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <prvAddCurrentTaskToDelayedList+0x58>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <prvAddCurrentTaskToDelayedList+0x5c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	429a      	cmp	r2, r3
 800151c:	d209      	bcs.n	8001532 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <prvAddCurrentTaskToDelayedList+0x60>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <prvAddCurrentTaskToDelayedList+0x58>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3304      	adds	r3, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4610      	mov	r0, r2
 800152c:	f7fe fe9d 	bl	800026a <vListInsert>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001530:	e010      	b.n	8001554 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <prvAddCurrentTaskToDelayedList+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <prvAddCurrentTaskToDelayedList+0x58>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3304      	adds	r3, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f7fe fe93 	bl	800026a <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <prvAddCurrentTaskToDelayedList+0x68>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	d202      	bcs.n	8001554 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
 800154e:	4a07      	ldr	r2, [pc, #28]	; (800156c <prvAddCurrentTaskToDelayedList+0x68>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000068 	.word	0x20000068
 8001560:	20000144 	.word	0x20000144
 8001564:	200000fc 	.word	0x200000fc
 8001568:	200000f8 	.word	0x200000f8
 800156c:	20000000 	.word	0x20000000

08001570 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800157c:	2050      	movs	r0, #80	; 0x50
 800157e:	f000 fd9b 	bl	80020b8 <pvPortMalloc>
 8001582:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01e      	beq.n	80015c8 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d106      	bne.n	800159e <prvAllocateTCBAndStack+0x2e>
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fd8f 	bl	80020b8 <pvPortMalloc>
 800159a:	4603      	mov	r3, r0
 800159c:	e000      	b.n	80015a0 <prvAllocateTCBAndStack+0x30>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d105      	bne.n	80015b8 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 fdc9 	bl	8002144 <vPortFree>
			pxNewTCB = NULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e007      	b.n	80015c8 <prvAllocateTCBAndStack+0x58>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	461a      	mov	r2, r3
 80015c2:	21a5      	movs	r1, #165	; 0xa5
 80015c4:	f001 f8f9 	bl	80027ba <memset>
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
 80015c8:	68fb      	ldr	r3, [r7, #12]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fdb0 	bl	8002144 <vPortFree>
		vPortFree( pxTCB );
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 fdad 	bl	8002144 <vPortFree>
	}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <prvResetNextTaskUnblockTime+0x44>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <prvResetNextTaskUnblockTime+0x14>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <prvResetNextTaskUnblockTime+0x16>
 8001608:	2300      	movs	r3, #0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <prvResetNextTaskUnblockTime+0x48>)
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 8001616:	e008      	b.n	800162a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <prvResetNextTaskUnblockTime+0x44>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <prvResetNextTaskUnblockTime+0x48>)
 8001628:	6013      	str	r3, [r2, #0]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	200000f8 	.word	0x200000f8
 800163c:	20000000 	.word	0x20000000

08001640 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <xTaskGetCurrentTaskHandle+0x1c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800164c:	687b      	ldr	r3, [r7, #4]
	}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000068 	.word	0x20000068

08001660 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <xTaskGetSchedulerState+0x34>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800166e:	2301      	movs	r3, #1
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	e008      	b.n	8001686 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <xTaskGetSchedulerState+0x38>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800167c:	2302      	movs	r3, #2
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	e001      	b.n	8001686 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001686:	687b      	ldr	r3, [r7, #4]
	}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	2000014c 	.word	0x2000014c
 8001698:	20000160 	.word	0x20000160

0800169c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d04a      	beq.n	8001744 <vTaskPriorityInherit+0xa8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <vTaskPriorityInherit+0xb0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d243      	bcs.n	8001744 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db06      	blt.n	80016d2 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <vTaskPriorityInherit+0xb0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	f1c3 0205 	rsb	r2, r3, #5
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6959      	ldr	r1, [r3, #20]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <vTaskPriorityInherit+0xb4>)
 80016e4:	4413      	add	r3, r2
 80016e6:	4299      	cmp	r1, r3
 80016e8:	d101      	bne.n	80016ee <vTaskPriorityInherit+0x52>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <vTaskPriorityInherit+0x54>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d022      	beq.n	800173a <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3304      	adds	r3, #4
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fdef 	bl	80002dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <vTaskPriorityInherit+0xb0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <vTaskPriorityInherit+0xb8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d903      	bls.n	800171c <vTaskPriorityInherit+0x80>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <vTaskPriorityInherit+0xb8>)
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4a09      	ldr	r2, [pc, #36]	; (8001750 <vTaskPriorityInherit+0xb4>)
 800172a:	441a      	add	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3304      	adds	r3, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4610      	mov	r0, r2
 8001734:	f7fe fd75 	bl	8000222 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001738:	e004      	b.n	8001744 <vTaskPriorityInherit+0xa8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <vTaskPriorityInherit+0xb0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000068 	.word	0x20000068
 8001750:	2000006c 	.word	0x2000006c
 8001754:	20000148 	.word	0x20000148

08001758 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d032      	beq.n	80017d4 <xTaskPriorityDisinherit+0x7c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001776:	429a      	cmp	r2, r3
 8001778:	d02c      	beq.n	80017d4 <xTaskPriorityDisinherit+0x7c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == 0 )
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	2b00      	cmp	r3, #0
 8001780:	d128      	bne.n	80017d4 <xTaskPriorityDisinherit+0x7c>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3304      	adds	r3, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fda8 	bl	80002dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	f1c3 0205 	rsb	r2, r3, #5
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <xTaskPriorityDisinherit+0x88>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d903      	bls.n	80017b4 <xTaskPriorityDisinherit+0x5c>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <xTaskPriorityDisinherit+0x88>)
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <xTaskPriorityDisinherit+0x8c>)
 80017c2:	441a      	add	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	3304      	adds	r3, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f7fe fd29 	bl	8000222 <vListInsertEnd>

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80017d4:	68fb      	ldr	r3, [r7, #12]
	}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000148 	.word	0x20000148
 80017e4:	2000006c 	.word	0x2000006c

080017e8 <vTaskIncrementMutexHeldCount>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

void vTaskIncrementMutexHeldCount( void )
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
	/* If xSemaphoreCreateMutex() is called before any tasks have been created
	then pxCurrentTCB will be NULL. */
	if( pxCurrentTCB != NULL )
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <vTaskIncrementMutexHeldCount+0x20>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d004      	beq.n	80017fe <vTaskIncrementMutexHeldCount+0x16>
	{
		( pxCurrentTCB->uxMutexesHeld )++;
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <vTaskIncrementMutexHeldCount+0x20>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017fa:	3201      	adds	r2, #1
 80017fc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	20000068 	.word	0x20000068

0800180c <vTaskDecrementMutexHeldCount>:
/*-----------------------------------------------------------*/

void vTaskDecrementMutexHeldCount( void )
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	/* If xSemaphoreCreateMutex() is called before any tasks have been created
	then pxCurrentTCB will be NULL. */
	if( pxCurrentTCB != NULL )
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <vTaskDecrementMutexHeldCount+0x2c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00c      	beq.n	8001832 <vTaskDecrementMutexHeldCount+0x26>
	{
		configASSERT( pxCurrentTCB->uxMutexesHeld );
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <vTaskDecrementMutexHeldCount+0x2c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <vTaskDecrementMutexHeldCount+0x1c>
 8001822:	f000 fbaf 	bl	8001f84 <ulPortSetInterruptMask>
 8001826:	e7fe      	b.n	8001826 <vTaskDecrementMutexHeldCount+0x1a>
		( pxCurrentTCB->uxMutexesHeld )--;
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <vTaskDecrementMutexHeldCount+0x2c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800182e:	3a01      	subs	r2, #1
 8001830:	64da      	str	r2, [r3, #76]	; 0x4c
	}
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000068 	.word	0x20000068

0800183c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001846:	f000 fa49 	bl	8001cdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <xTimerCreateTimerTask+0x4c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00f      	beq.n	8001872 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8001852:	2300      	movs	r3, #0
 8001854:	9303      	str	r3, [sp, #12]
 8001856:	2300      	movs	r3, #0
 8001858:	9302      	str	r3, [sp, #8]
 800185a:	2300      	movs	r3, #0
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	2302      	movs	r3, #2
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2300      	movs	r3, #0
 8001864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001868:	4908      	ldr	r1, [pc, #32]	; (800188c <xTimerCreateTimerTask+0x50>)
 800186a:	4809      	ldr	r0, [pc, #36]	; (8001890 <xTimerCreateTimerTask+0x54>)
 800186c:	f7ff f972 	bl	8000b54 <xTaskGenericCreate>
 8001870:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <xTimerCreateTimerTask+0x42>
 8001878:	f000 fb84 	bl	8001f84 <ulPortSetInterruptMask>
 800187c:	e7fe      	b.n	800187c <xTimerCreateTimerTask+0x40>
	return xReturn;
 800187e:	687b      	ldr	r3, [r7, #4]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000194 	.word	0x20000194
 800188c:	080027ec 	.word	0x080027ec
 8001890:	08001985 	.word	0x08001985

08001894 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <xTimerGenericCommand+0x7c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d02a      	beq.n	8001904 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	dc18      	bgt.n	80018f2 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80018c0:	f7ff fece 	bl	8001660 <xTaskGetSchedulerState>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d109      	bne.n	80018de <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <xTimerGenericCommand+0x7c>)
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	f107 0110 	add.w	r1, r7, #16
 80018d2:	2300      	movs	r3, #0
 80018d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018d6:	f7fe fdc5 	bl	8000464 <xQueueGenericSend>
 80018da:	61f8      	str	r0, [r7, #28]
 80018dc:	e012      	b.n	8001904 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <xTimerGenericCommand+0x7c>)
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	f107 0110 	add.w	r1, r7, #16
 80018e6:	2300      	movs	r3, #0
 80018e8:	2200      	movs	r2, #0
 80018ea:	f7fe fdbb 	bl	8000464 <xQueueGenericSend>
 80018ee:	61f8      	str	r0, [r7, #28]
 80018f0:	e008      	b.n	8001904 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <xTimerGenericCommand+0x7c>)
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	f107 0110 	add.w	r1, r7, #16
 80018fa:	2300      	movs	r3, #0
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	f7fe fe74 	bl	80005ea <xQueueGenericSendFromISR>
 8001902:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8001904:	69fb      	ldr	r3, [r7, #28]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000194 	.word	0x20000194

08001914 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af02      	add	r7, sp, #8
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <prvProcessExpiredTimer+0x6c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3304      	adds	r3, #4
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fcd5 	bl	80002dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d11a      	bne.n	8001970 <prvProcessExpiredTimer+0x5c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	18d1      	adds	r1, r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f8a8 	bl	8001a9c <prvInsertTimerInActiveList>
 800194c:	4603      	mov	r3, r0
 800194e:	2b01      	cmp	r3, #1
 8001950:	d10e      	bne.n	8001970 <prvProcessExpiredTimer+0x5c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001952:	2300      	movs	r3, #0
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	2100      	movs	r1, #0
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff ff99 	bl	8001894 <xTimerGenericCommand>
 8001962:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <prvProcessExpiredTimer+0x5c>
 800196a:	f000 fb0b 	bl	8001f84 <ulPortSetInterruptMask>
 800196e:	e7fe      	b.n	800196e <prvProcessExpiredTimer+0x5a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	4798      	blx	r3
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2000018c 	.word	0x2000018c

08001984 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800198c:	f107 0308 	add.w	r3, r7, #8
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f83f 	bl	8001a14 <prvGetNextExpireTime>
 8001996:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4619      	mov	r1, r3
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f803 	bl	80019a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80019a2:	f000 f8bd 	bl	8001b20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80019a6:	e7f1      	b.n	800198c <prvTimerTask+0x8>

080019a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80019b2:	f7ff f9ed 	bl	8000d90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f84e 	bl	8001a5c <prvSampleTimeNow>
 80019c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11d      	bne.n	8001a04 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10a      	bne.n	80019e4 <prvProcessTimerOrBlockTask+0x3c>
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d806      	bhi.n	80019e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80019d6:	f7ff f9e9 	bl	8000dac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80019da:	68f9      	ldr	r1, [r7, #12]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff99 	bl	8001914 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80019e2:	e011      	b.n	8001a08 <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <prvProcessTimerOrBlockTask+0x68>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7ff f884 	bl	8000afc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80019f4:	f7ff f9da 	bl	8000dac <xTaskResumeAll>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d104      	bne.n	8001a08 <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
 80019fe:	f000 fa75 	bl	8001eec <vPortYield>
}
 8001a02:	e001      	b.n	8001a08 <prvProcessTimerOrBlockTask+0x60>
			( void ) xTaskResumeAll();
 8001a04:	f7ff f9d2 	bl	8000dac <xTaskResumeAll>
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000194 	.word	0x20000194

08001a14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <prvGetNextExpireTime+0x44>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf0c      	ite	eq
 8001a26:	2301      	moveq	r3, #1
 8001a28:	2300      	movne	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <prvGetNextExpireTime+0x44>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e001      	b.n	8001a4a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	2000018c 	.word	0x2000018c

08001a5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8001a64:	f7ff fa28 	bl	8000eb8 <xTaskGetTickCount>
 8001a68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <prvSampleTimeNow+0x3c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d205      	bcs.n	8001a80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8001a74:	f000 f8d8 	bl	8001c28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e002      	b.n	8001a86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <prvSampleTimeNow+0x3c>)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000198 	.word	0x20000198

08001a9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d812      	bhi.n	8001ae8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	1ad2      	subs	r2, r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d302      	bcc.n	8001ad6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	e01b      	b.n	8001b0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <prvInsertTimerInActiveList+0x7c>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3304      	adds	r3, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f7fe fbc2 	bl	800026a <vListInsert>
 8001ae6:	e012      	b.n	8001b0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d206      	bcs.n	8001afe <prvInsertTimerInActiveList+0x62>
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d302      	bcc.n	8001afe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8001af8:	2301      	movs	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e007      	b.n	8001b0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <prvInsertTimerInActiveList+0x80>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3304      	adds	r3, #4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4610      	mov	r0, r2
 8001b0a:	f7fe fbae 	bl	800026a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8001b0e:	697b      	ldr	r3, [r7, #20]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000190 	.word	0x20000190
 8001b1c:	2000018c 	.word	0x2000018c

08001b20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001b26:	e06c      	b.n	8001c02 <prvProcessReceivedCommands+0xe2>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db68      	blt.n	8001c00 <prvProcessReceivedCommands+0xe0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d004      	beq.n	8001b44 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fbcc 	bl	80002dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff88 	bl	8001a5c <prvSampleTimeNow>
 8001b4c:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b09      	cmp	r3, #9
 8001b52:	d856      	bhi.n	8001c02 <prvProcessReceivedCommands+0xe2>
 8001b54:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <prvProcessReceivedCommands+0x3c>)
 8001b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5a:	bf00      	nop
 8001b5c:	08001b85 	.word	0x08001b85
 8001b60:	08001b85 	.word	0x08001b85
 8001b64:	08001b85 	.word	0x08001b85
 8001b68:	08001c03 	.word	0x08001c03
 8001b6c:	08001bd1 	.word	0x08001bd1
 8001b70:	08001bf9 	.word	0x08001bf9
 8001b74:	08001b85 	.word	0x08001b85
 8001b78:	08001b85 	.word	0x08001b85
 8001b7c:	08001c03 	.word	0x08001c03
 8001b80:	08001bd1 	.word	0x08001bd1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	18d1      	adds	r1, r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	69f8      	ldr	r0, [r7, #28]
 8001b92:	f7ff ff83 	bl	8001a9c <prvInsertTimerInActiveList>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d132      	bne.n	8001c02 <prvProcessReceivedCommands+0xe2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	69f8      	ldr	r0, [r7, #28]
 8001ba2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d12a      	bne.n	8001c02 <prvProcessReceivedCommands+0xe2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	441a      	add	r2, r3
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	69f8      	ldr	r0, [r7, #28]
 8001bbe:	f7ff fe69 	bl	8001894 <xTimerGenericCommand>
 8001bc2:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d11b      	bne.n	8001c02 <prvProcessReceivedCommands+0xe2>
 8001bca:	f000 f9db 	bl	8001f84 <ulPortSetInterruptMask>
 8001bce:	e7fe      	b.n	8001bce <prvProcessReceivedCommands+0xae>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <prvProcessReceivedCommands+0xc4>
 8001bde:	f000 f9d1 	bl	8001f84 <ulPortSetInterruptMask>
 8001be2:	e7fe      	b.n	8001be2 <prvProcessReceivedCommands+0xc2>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	699a      	ldr	r2, [r3, #24]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	18d1      	adds	r1, r2, r3
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	69f8      	ldr	r0, [r7, #28]
 8001bf2:	f7ff ff53 	bl	8001a9c <prvInsertTimerInActiveList>
					break;
 8001bf6:	e004      	b.n	8001c02 <prvProcessReceivedCommands+0xe2>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 8001bf8:	69f8      	ldr	r0, [r7, #28]
 8001bfa:	f000 faa3 	bl	8002144 <vPortFree>
					break;
 8001bfe:	e000      	b.n	8001c02 <prvProcessReceivedCommands+0xe2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8001c00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <prvProcessReceivedCommands+0x104>)
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	f107 0108 	add.w	r1, r7, #8
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f7fe fd5f 	bl	80006d0 <xQueueGenericReceive>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d187      	bne.n	8001b28 <prvProcessReceivedCommands+0x8>
	}
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000194 	.word	0x20000194

08001c28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001c2e:	e03d      	b.n	8001cac <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <prvSwitchTimerLists+0xac>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <prvSwitchTimerLists+0xac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3304      	adds	r3, #4
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fb47 	bl	80002dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d126      	bne.n	8001cac <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4413      	add	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d90e      	bls.n	8001c8e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <prvSwitchTimerLists+0xac>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3304      	adds	r3, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f7fe faef 	bl	800026a <vListInsert>
 8001c8c:	e00e      	b.n	8001cac <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001c8e:	2300      	movs	r3, #0
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2300      	movs	r3, #0
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	2100      	movs	r1, #0
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f7ff fdfb 	bl	8001894 <xTimerGenericCommand>
 8001c9e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <prvSwitchTimerLists+0x84>
 8001ca6:	f000 f96d 	bl	8001f84 <ulPortSetInterruptMask>
 8001caa:	e7fe      	b.n	8001caa <prvSwitchTimerLists+0x82>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <prvSwitchTimerLists+0xac>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1bc      	bne.n	8001c30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <prvSwitchTimerLists+0xac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <prvSwitchTimerLists+0xb0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <prvSwitchTimerLists+0xac>)
 8001cc2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <prvSwitchTimerLists+0xb0>)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	6013      	str	r3, [r2, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000018c 	.word	0x2000018c
 8001cd8:	20000190 	.word	0x20000190

08001cdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8001ce0:	f000 f916 	bl	8001f10 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <prvCheckForValidListAndQueue+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d124      	bne.n	8001d36 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8001cec:	4815      	ldr	r0, [pc, #84]	; (8001d44 <prvCheckForValidListAndQueue+0x68>)
 8001cee:	f7fe fa6b 	bl	80001c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8001cf2:	4815      	ldr	r0, [pc, #84]	; (8001d48 <prvCheckForValidListAndQueue+0x6c>)
 8001cf4:	f7fe fa68 	bl	80001c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <prvCheckForValidListAndQueue+0x70>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <prvCheckForValidListAndQueue+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <prvCheckForValidListAndQueue+0x74>)
 8001d00:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <prvCheckForValidListAndQueue+0x6c>)
 8001d02:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001d04:	2200      	movs	r2, #0
 8001d06:	210c      	movs	r1, #12
 8001d08:	200a      	movs	r0, #10
 8001d0a:	f7fe fb69 	bl	80003e0 <xQueueGenericCreate>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <prvCheckForValidListAndQueue+0x64>)
 8001d12:	6013      	str	r3, [r2, #0]
			configASSERT( xTimerQueue );
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <prvCheckForValidListAndQueue+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <prvCheckForValidListAndQueue+0x46>
 8001d1c:	f000 f932 	bl	8001f84 <ulPortSetInterruptMask>
 8001d20:	e7fe      	b.n	8001d20 <prvCheckForValidListAndQueue+0x44>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <prvCheckForValidListAndQueue+0x64>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <prvCheckForValidListAndQueue+0x64>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4909      	ldr	r1, [pc, #36]	; (8001d54 <prvCheckForValidListAndQueue+0x78>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe feb9 	bl	8000aa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001d36:	f000 f90b 	bl	8001f50 <vPortExitCritical>
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000194 	.word	0x20000194
 8001d44:	20000164 	.word	0x20000164
 8001d48:	20000178 	.word	0x20000178
 8001d4c:	2000018c 	.word	0x2000018c
 8001d50:	20000190 	.word	0x20000190
 8001d54:	080027f4 	.word	0x080027f4

08001d58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3b04      	subs	r3, #4
 8001d68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3b04      	subs	r3, #4
 8001d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3b04      	subs	r3, #4
 8001d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001d84:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <pxPortInitialiseStack+0x60>)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3b14      	subs	r3, #20
 8001d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3b04      	subs	r3, #4
 8001d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f06f 0202 	mvn.w	r2, #2
 8001da2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3b20      	subs	r3, #32
 8001da8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	08001dbd 	.word	0x08001dbd

08001dbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <prvTaskExitError+0x1c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d002      	beq.n	8001dd0 <prvTaskExitError+0x14>
 8001dca:	f000 f8db 	bl	8001f84 <ulPortSetInterruptMask>
 8001dce:	e7fe      	b.n	8001dce <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 8001dd0:	f000 f8d8 	bl	8001f84 <ulPortSetInterruptMask>
	for( ;; );
 8001dd4:	e7fe      	b.n	8001dd4 <prvTaskExitError+0x18>
 8001dd6:	bf00      	nop
 8001dd8:	20000004 	.word	0x20000004

08001ddc <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <pxCurrentTCBConst2>)
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	6808      	ldr	r0, [r1, #0]
 8001de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001de6:	f380 8809 	msr	PSP, r0
 8001dea:	f3bf 8f6f 	isb	sy
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f380 8811 	msr	BASEPRI, r0
 8001df6:	4770      	bx	lr

08001df8 <pxCurrentTCBConst2>:
 8001df8:	20000068 	.word	0x20000068
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop

08001e00 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001e00:	4806      	ldr	r0, [pc, #24]	; (8001e1c <prvPortStartFirstTask+0x1c>)
 8001e02:	6800      	ldr	r0, [r0, #0]
 8001e04:	6800      	ldr	r0, [r0, #0]
 8001e06:	f380 8808 	msr	MSP, r0
 8001e0a:	b662      	cpsie	i
 8001e0c:	b661      	cpsie	f
 8001e0e:	f3bf 8f4f 	dsb	sy
 8001e12:	f3bf 8f6f 	isb	sy
 8001e16:	df00      	svc	0
 8001e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001e1a:	bf00      	nop
 8001e1c:	e000ed08 	.word	0xe000ed08

08001e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <xPortStartScheduler+0xb4>)
 8001e28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	22ff      	movs	r2, #255	; 0xff
 8001e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <xPortStartScheduler+0xb8>)
 8001e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <xPortStartScheduler+0xbc>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e54:	e009      	b.n	8001e6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <xPortStartScheduler+0xbc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <xPortStartScheduler+0xbc>)
 8001e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	2b80      	cmp	r3, #128	; 0x80
 8001e74:	d0ef      	beq.n	8001e56 <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <xPortStartScheduler+0xbc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	4a17      	ldr	r2, [pc, #92]	; (8001edc <xPortStartScheduler+0xbc>)
 8001e7e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001e80:	4b16      	ldr	r3, [pc, #88]	; (8001edc <xPortStartScheduler+0xbc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <xPortStartScheduler+0xbc>)
 8001e8a:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <xPortStartScheduler+0xc0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <xPortStartScheduler+0xc0>)
 8001e9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e9e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <xPortStartScheduler+0xc0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <xPortStartScheduler+0xc0>)
 8001ea6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001eaa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001eac:	f000 f8ba 	bl	8002024 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <xPortStartScheduler+0xc4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
//	vPortEnableVFP(); //GUTEMBERG

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <xPortStartScheduler+0xc8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <xPortStartScheduler+0xc8>)
 8001ebc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001ec0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001ec2:	f7ff ff9d 	bl	8001e00 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001ec6:	f7ff ff79 	bl	8001dbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	e000e400 	.word	0xe000e400
 8001ed8:	2000019c 	.word	0x2000019c
 8001edc:	200001a0 	.word	0x200001a0
 8001ee0:	e000ed20 	.word	0xe000ed20
 8001ee4:	20000004 	.word	0x20000004
 8001ee8:	e000ef34 	.word	0xe000ef34

08001eec <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <vPortYield+0x20>)
 8001ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ef6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8001ef8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001efc:	f3bf 8f6f 	isb	sy
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed04 	.word	0xe000ed04

08001f10 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8001f14:	f000 f836 	bl	8001f84 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <vPortEnterCritical+0x38>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <vPortEnterCritical+0x38>)
 8001f20:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8001f22:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001f26:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <vPortEnterCritical+0x38>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d108      	bne.n	8001f44 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <vPortEnterCritical+0x3c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <vPortEnterCritical+0x34>
 8001f3e:	f000 f821 	bl	8001f84 <ulPortSetInterruptMask>
 8001f42:	e7fe      	b.n	8001f42 <vPortEnterCritical+0x32>
	}
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000004 	.word	0x20000004
 8001f4c:	e000ed04 	.word	0xe000ed04

08001f50 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <vPortExitCritical+0x30>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <vPortExitCritical+0x12>
 8001f5c:	f000 f812 	bl	8001f84 <ulPortSetInterruptMask>
 8001f60:	e7fe      	b.n	8001f60 <vPortExitCritical+0x10>
	uxCriticalNesting--;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <vPortExitCritical+0x30>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <vPortExitCritical+0x30>)
 8001f6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <vPortExitCritical+0x30>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 8001f74:	2000      	movs	r0, #0
 8001f76:	f000 f80e 	bl	8001f96 <vPortClearInterruptMask>
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000004 	.word	0x20000004

08001f84 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8001f84:	f3ef 8011 	mrs	r0, BASEPRI
 8001f88:	f04f 0150 	mov.w	r1, #80	; 0x50
 8001f8c:	f381 8811 	msr	BASEPRI, r1
 8001f90:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3

08001f96 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 8001f96:	f380 8811 	msr	BASEPRI, r0
 8001f9a:	4770      	bx	lr
		:::"r0"														\
	);

	/* Just to avoid compiler warnings. */
	( void ) ulNewMaskValue;
}
 8001f9c:	bf00      	nop
	...

08001fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001fa0:	f3ef 8009 	mrs	r0, PSP
 8001fa4:	f3bf 8f6f 	isb	sy
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <pxCurrentTCBConst>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	f01e 0f10 	tst.w	lr, #16
 8001fb0:	bf08      	it	eq
 8001fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fba:	6010      	str	r0, [r2, #0]
 8001fbc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001fc4:	f380 8811 	msr	BASEPRI, r0
 8001fc8:	f7ff f840 	bl	800104c <vTaskSwitchContext>
 8001fcc:	f04f 0000 	mov.w	r0, #0
 8001fd0:	f380 8811 	msr	BASEPRI, r0
 8001fd4:	bc08      	pop	{r3}
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	6808      	ldr	r0, [r1, #0]
 8001fda:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fde:	f01e 0f10 	tst.w	lr, #16
 8001fe2:	bf08      	it	eq
 8001fe4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001fe8:	f380 8809 	msr	PSP, r0
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop

08001ff4 <pxCurrentTCBConst>:
 8001ff4:	20000068 	.word	0x20000068
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop

08001ffc <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002000:	f7ff ffc0 	bl	8001f84 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002004:	f7fe ff6a 	bl	8000edc <xTaskIncrementTick>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <SysTick_Handler+0x24>)
 8002010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002014:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8002016:	2000      	movs	r0, #0
 8002018:	f7ff ffbd 	bl	8001f96 <vPortClearInterruptMask>
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	e000ed04 	.word	0xe000ed04

08002024 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <vPortSetupTimerInterrupt+0x28>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a08      	ldr	r2, [pc, #32]	; (8002050 <vPortSetupTimerInterrupt+0x2c>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	099b      	lsrs	r3, r3, #6
 8002034:	4a07      	ldr	r2, [pc, #28]	; (8002054 <vPortSetupTimerInterrupt+0x30>)
 8002036:	3b01      	subs	r3, #1
 8002038:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <vPortSetupTimerInterrupt+0x34>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000008 	.word	0x20000008
 8002050:	10624dd3 	.word	0x10624dd3
 8002054:	e000e014 	.word	0xe000e014
 8002058:	e000e010 	.word	0xe000e010

0800205c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002062:	f3ef 8305 	mrs	r3, IPSR
 8002066:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b0f      	cmp	r3, #15
 800206c:	d90c      	bls.n	8002088 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800206e:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <vPortValidateInterruptPriority+0x4c>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <vPortValidateInterruptPriority+0x50>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	429a      	cmp	r2, r3
 8002080:	d202      	bcs.n	8002088 <vPortValidateInterruptPriority+0x2c>
 8002082:	f7ff ff7f 	bl	8001f84 <ulPortSetInterruptMask>
 8002086:	e7fe      	b.n	8002086 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <vPortValidateInterruptPriority+0x54>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <vPortValidateInterruptPriority+0x58>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d902      	bls.n	800209e <vPortValidateInterruptPriority+0x42>
 8002098:	f7ff ff74 	bl	8001f84 <ulPortSetInterruptMask>
 800209c:	e7fe      	b.n	800209c <vPortValidateInterruptPriority+0x40>
	}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e3f0 	.word	0xe000e3f0
 80020ac:	2000019c 	.word	0x2000019c
 80020b0:	e000ed0c 	.word	0xe000ed0c
 80020b4:	200001a0 	.word	0x200001a0

080020b8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f023 0307 	bic.w	r3, r3, #7
 80020d4:	3308      	adds	r3, #8
 80020d6:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 80020d8:	f7fe fe5a 	bl	8000d90 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <pvPortMalloc+0x7c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <pvPortMalloc+0x80>)
 80020e6:	f023 0307 	bic.w	r3, r3, #7
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <pvPortMalloc+0x7c>)
 80020ee:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <pvPortMalloc+0x84>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a11      	ldr	r2, [pc, #68]	; (8002140 <pvPortMalloc+0x88>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d813      	bhi.n	8002126 <pvPortMalloc+0x6e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <pvPortMalloc+0x84>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	441a      	add	r2, r3
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <pvPortMalloc+0x84>)
 8002108:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800210a:	429a      	cmp	r2, r3
 800210c:	d90b      	bls.n	8002126 <pvPortMalloc+0x6e>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <pvPortMalloc+0x7c>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <pvPortMalloc+0x84>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <pvPortMalloc+0x84>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	4a06      	ldr	r2, [pc, #24]	; (800213c <pvPortMalloc+0x84>)
 8002124:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002126:	f7fe fe41 	bl	8000dac <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20012da8 	.word	0x20012da8
 8002138:	200001ac 	.word	0x200001ac
 800213c:	20012da4 	.word	0x20012da4
 8002140:	00012bf7 	.word	0x00012bf7

08002144 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <vPortFree+0x14>
 8002152:	f7ff ff17 	bl	8001f84 <ulPortSetInterruptMask>
 8002156:	e7fe      	b.n	8002156 <vPortFree+0x12>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e076      	b.n	800226a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800217c:	2201      	movs	r2, #1
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	429a      	cmp	r2, r3
 8002196:	d165      	bne.n	8002264 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2103      	movs	r1, #3
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	401a      	ands	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	791b      	ldrb	r3, [r3, #4]
 80021b6:	4619      	mov	r1, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	791b      	ldrb	r3, [r3, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d003      	beq.n	80021d6 <GPIO_Init+0x76>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	791b      	ldrb	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d12e      	bne.n	8002234 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2103      	movs	r1, #3
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	401a      	ands	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	795b      	ldrb	r3, [r3, #5]
 80021f4:	4619      	mov	r1, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	b29b      	uxth	r3, r3
 800220c:	4619      	mov	r1, r3
 800220e:	2301      	movs	r3, #1
 8002210:	408b      	lsls	r3, r1
 8002212:	43db      	mvns	r3, r3
 8002214:	401a      	ands	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	7992      	ldrb	r2, [r2, #6]
 8002222:	4611      	mov	r1, r2
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	b292      	uxth	r2, r2
 8002228:	fa01 f202 	lsl.w	r2, r1, r2
 800222c:	b292      	uxth	r2, r2
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	b29b      	uxth	r3, r3
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2103      	movs	r1, #3
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	401a      	ands	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	79db      	ldrb	r3, [r3, #7]
 8002254:	4619      	mov	r1, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d985      	bls.n	800217c <GPIO_Init+0x1c>
    }
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	460b      	mov	r3, r1
 8002288:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	e001      	b.n	80022a4 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	405a      	eors	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	615a      	str	r2, [r3, #20]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <RCC_AHB1PeriphClockCmd+0x3c>)
 80022ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ee:	4909      	ldr	r1, [pc, #36]	; (8002314 <RCC_AHB1PeriphClockCmd+0x3c>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80022f6:	e006      	b.n	8002306 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <RCC_AHB1PeriphClockCmd+0x3c>)
 80022fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	43db      	mvns	r3, r3
 8002300:	4904      	ldr	r1, [pc, #16]	; (8002314 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002302:	4013      	ands	r3, r2
 8002304:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800

08002318 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <RCC_APB2PeriphClockCmd+0x3c>)
 800232c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800232e:	4909      	ldr	r1, [pc, #36]	; (8002354 <RCC_APB2PeriphClockCmd+0x3c>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4313      	orrs	r3, r2
 8002334:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002336:	e006      	b.n	8002346 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <RCC_APB2PeriphClockCmd+0x3c>)
 800233a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	43db      	mvns	r3, r3
 8002340:	4904      	ldr	r1, [pc, #16]	; (8002354 <RCC_APB2PeriphClockCmd+0x3c>)
 8002342:	4013      	ands	r3, r2
 8002344:	644b      	str	r3, [r1, #68]	; 0x44
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <main>:
void preparacaoCafe(void*);

void initGPIO();
void initBUTTON();

int main(void){
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af04      	add	r7, sp, #16
  
  initGPIO();
 800235e:	f000 f8fb 	bl	8002558 <initGPIO>
  initBUTTON();
 8002362:	f000 f917 	bl	8002594 <initBUTTON>

  // Create task
  xTaskCreate(
 8002366:	2300      	movs	r3, #0
 8002368:	9303      	str	r3, [sp, #12]
 800236a:	2300      	movs	r3, #0
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	2300      	movs	r3, #0
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	2302      	movs	r3, #2
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	2282      	movs	r2, #130	; 0x82
 800237a:	492d      	ldr	r1, [pc, #180]	; (8002430 <main+0xd8>)
 800237c:	482d      	ldr	r0, [pc, #180]	; (8002434 <main+0xdc>)
 800237e:	f7fe fbe9 	bl	8000b54 <xTaskGenericCreate>
		  configMINIMAL_STACK_SIZE,         // Stack depth in words
		  (void*) NULL,                     // Pointer to tasks arguments
		  tskIDLE_PRIORITY + 2UL,           // Task priority
		  NULL                              // Task handle
  );
  xTaskCreate(controleDoArCondicionado, "Task2", configMINIMAL_STACK_SIZE, (void*) NULL, tskIDLE_PRIORITY + 2UL, NULL);
 8002382:	2300      	movs	r3, #0
 8002384:	9303      	str	r3, [sp, #12]
 8002386:	2300      	movs	r3, #0
 8002388:	9302      	str	r3, [sp, #8]
 800238a:	2300      	movs	r3, #0
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	2302      	movs	r3, #2
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2300      	movs	r3, #0
 8002394:	2282      	movs	r2, #130	; 0x82
 8002396:	4928      	ldr	r1, [pc, #160]	; (8002438 <main+0xe0>)
 8002398:	4828      	ldr	r0, [pc, #160]	; (800243c <main+0xe4>)
 800239a:	f7fe fbdb 	bl	8000b54 <xTaskGenericCreate>
  xTaskCreate(modoSilencioso, "Task3", configMINIMAL_STACK_SIZE, (void*) NULL, tskIDLE_PRIORITY + 2UL, NULL);
 800239e:	2300      	movs	r3, #0
 80023a0:	9303      	str	r3, [sp, #12]
 80023a2:	2300      	movs	r3, #0
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2300      	movs	r3, #0
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	2302      	movs	r3, #2
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2300      	movs	r3, #0
 80023b0:	2282      	movs	r2, #130	; 0x82
 80023b2:	4923      	ldr	r1, [pc, #140]	; (8002440 <main+0xe8>)
 80023b4:	4823      	ldr	r0, [pc, #140]	; (8002444 <main+0xec>)
 80023b6:	f7fe fbcd 	bl	8000b54 <xTaskGenericCreate>
  xTaskCreate(controleDeTemperatura, "Task4", configMINIMAL_STACK_SIZE, (void*) NULL, tskIDLE_PRIORITY + 2UL, NULL);
 80023ba:	2300      	movs	r3, #0
 80023bc:	9303      	str	r3, [sp, #12]
 80023be:	2300      	movs	r3, #0
 80023c0:	9302      	str	r3, [sp, #8]
 80023c2:	2300      	movs	r3, #0
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	2302      	movs	r3, #2
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2300      	movs	r3, #0
 80023cc:	2282      	movs	r2, #130	; 0x82
 80023ce:	491e      	ldr	r1, [pc, #120]	; (8002448 <main+0xf0>)
 80023d0:	481e      	ldr	r0, [pc, #120]	; (800244c <main+0xf4>)
 80023d2:	f7fe fbbf 	bl	8000b54 <xTaskGenericCreate>
  xTaskCreate(ajusteIluminacao, "Task5", configMINIMAL_STACK_SIZE, (void*) NULL, tskIDLE_PRIORITY + 2UL, NULL);
 80023d6:	2300      	movs	r3, #0
 80023d8:	9303      	str	r3, [sp, #12]
 80023da:	2300      	movs	r3, #0
 80023dc:	9302      	str	r3, [sp, #8]
 80023de:	2300      	movs	r3, #0
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	2302      	movs	r3, #2
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2300      	movs	r3, #0
 80023e8:	2282      	movs	r2, #130	; 0x82
 80023ea:	4919      	ldr	r1, [pc, #100]	; (8002450 <main+0xf8>)
 80023ec:	4819      	ldr	r0, [pc, #100]	; (8002454 <main+0xfc>)
 80023ee:	f7fe fbb1 	bl	8000b54 <xTaskGenericCreate>
  xTaskCreate(cortinasAutomaticas, "Task6", configMINIMAL_STACK_SIZE, (void*) NULL, tskIDLE_PRIORITY + 2UL, NULL);
 80023f2:	2300      	movs	r3, #0
 80023f4:	9303      	str	r3, [sp, #12]
 80023f6:	2300      	movs	r3, #0
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	2300      	movs	r3, #0
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	2302      	movs	r3, #2
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2300      	movs	r3, #0
 8002404:	2282      	movs	r2, #130	; 0x82
 8002406:	4914      	ldr	r1, [pc, #80]	; (8002458 <main+0x100>)
 8002408:	4814      	ldr	r0, [pc, #80]	; (800245c <main+0x104>)
 800240a:	f7fe fba3 	bl	8000b54 <xTaskGenericCreate>
  xTaskCreate(preparacaoCafe, "Task7", configMINIMAL_STACK_SIZE, (void*) NULL, tskIDLE_PRIORITY + 2UL, NULL);
 800240e:	2300      	movs	r3, #0
 8002410:	9303      	str	r3, [sp, #12]
 8002412:	2300      	movs	r3, #0
 8002414:	9302      	str	r3, [sp, #8]
 8002416:	2300      	movs	r3, #0
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	2302      	movs	r3, #2
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2300      	movs	r3, #0
 8002420:	2282      	movs	r2, #130	; 0x82
 8002422:	490f      	ldr	r1, [pc, #60]	; (8002460 <main+0x108>)
 8002424:	480f      	ldr	r0, [pc, #60]	; (8002464 <main+0x10c>)
 8002426:	f7fe fb95 	bl	8000b54 <xTaskGenericCreate>

  // Start the RTOS Scheduler
  vTaskStartScheduler();
 800242a:	f7fe fc79 	bl	8000d20 <vTaskStartScheduler>
  
  while(1);
 800242e:	e7fe      	b.n	800242e <main+0xd6>
 8002430:	080027fc 	.word	0x080027fc
 8002434:	08002469 	.word	0x08002469
 8002438:	08002804 	.word	0x08002804
 800243c:	08002489 	.word	0x08002489
 8002440:	0800280c 	.word	0x0800280c
 8002444:	080024a9 	.word	0x080024a9
 8002448:	08002814 	.word	0x08002814
 800244c:	080024c9 	.word	0x080024c9
 8002450:	0800281c 	.word	0x0800281c
 8002454:	080024e9 	.word	0x080024e9
 8002458:	08002824 	.word	0x08002824
 800245c:	08002509 	.word	0x08002509
 8002460:	0800282c 	.word	0x0800282c
 8002464:	08002529 	.word	0x08002529

08002468 <despertadorInteligente>:
}

// Repositorio de Task
void despertadorInteligente(void *pvParameters){
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	while(1){
		GPIO_ToggleBits(GPIOD, GPIO_Pin_12);
 8002470:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002474:	4803      	ldr	r0, [pc, #12]	; (8002484 <despertadorInteligente+0x1c>)
 8002476:	f7ff ff1c 	bl	80022b2 <GPIO_ToggleBits>
		vTaskDelay(2000 / portTICK_RATE_MS);
 800247a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800247e:	f7fe fc1d 	bl	8000cbc <vTaskDelay>
		GPIO_ToggleBits(GPIOD, GPIO_Pin_12);
 8002482:	e7f5      	b.n	8002470 <despertadorInteligente+0x8>
 8002484:	40020c00 	.word	0x40020c00

08002488 <controleDoArCondicionado>:
		 * Realizar a acionamento do alarme para a horário defenido
		 *
		*/
	}
}
void controleDoArCondicionado(void *pvParameters){
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	while(1){
		GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
 8002490:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002494:	4803      	ldr	r0, [pc, #12]	; (80024a4 <controleDoArCondicionado+0x1c>)
 8002496:	f7ff ff0c 	bl	80022b2 <GPIO_ToggleBits>
		vTaskDelay(2000 / portTICK_RATE_MS);
 800249a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800249e:	f7fe fc0d 	bl	8000cbc <vTaskDelay>
		GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
 80024a2:	e7f5      	b.n	8002490 <controleDoArCondicionado+0x8>
 80024a4:	40020c00 	.word	0x40020c00

080024a8 <modoSilencioso>:
		 * Aciona o Ar-Condicionado para a temperatura desejada;
		 *
		 * */
	}
}
void modoSilencioso(void *pvParameters){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	while(1){
		GPIO_ToggleBits(GPIOD, GPIO_Pin_14);
 80024b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024b4:	4803      	ldr	r0, [pc, #12]	; (80024c4 <modoSilencioso+0x1c>)
 80024b6:	f7ff fefc 	bl	80022b2 <GPIO_ToggleBits>
		vTaskDelay(2000 / portTICK_RATE_MS);
 80024ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024be:	f7fe fbfd 	bl	8000cbc <vTaskDelay>
		GPIO_ToggleBits(GPIOD, GPIO_Pin_14);
 80024c2:	e7f5      	b.n	80024b0 <modoSilencioso+0x8>
 80024c4:	40020c00 	.word	0x40020c00

080024c8 <controleDeTemperatura>:
		 * Manda um sinal de configuração para todos os dispositivos entrarem no modo silencioso.
		 *
		 */
	}
}
void controleDeTemperatura(void *pvParameters){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	while(1){
		GPIO_ToggleBits(GPIOD, GPIO_Pin_12);
 80024d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024d4:	4803      	ldr	r0, [pc, #12]	; (80024e4 <controleDeTemperatura+0x1c>)
 80024d6:	f7ff feec 	bl	80022b2 <GPIO_ToggleBits>
		vTaskDelay(1000 / portTICK_RATE_MS);
 80024da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024de:	f7fe fbed 	bl	8000cbc <vTaskDelay>
		GPIO_ToggleBits(GPIOD, GPIO_Pin_12);
 80024e2:	e7f5      	b.n	80024d0 <controleDeTemperatura+0x8>
 80024e4:	40020c00 	.word	0x40020c00

080024e8 <ajusteIluminacao>:
		 * está fazendo pelo tempo em que esta usando o chuveiro.
		 *
		*/
	}
}
void ajusteIluminacao(void *pvParameters){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	while(1){
		GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
 80024f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024f4:	4803      	ldr	r0, [pc, #12]	; (8002504 <ajusteIluminacao+0x1c>)
 80024f6:	f7ff fedc 	bl	80022b2 <GPIO_ToggleBits>
		vTaskDelay(1000 / portTICK_RATE_MS);
 80024fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024fe:	f7fe fbdd 	bl	8000cbc <vTaskDelay>
		GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
 8002502:	e7f5      	b.n	80024f0 <ajusteIluminacao+0x8>
 8002504:	40020c00 	.word	0x40020c00

08002508 <cortinasAutomaticas>:
		 * Desliga ou ajusta a intencidade da luz do ambiente para um iluminação confortavel.
		 *
		 * */
	}
}
void cortinasAutomaticas(void *pvParameters){
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	while(1){
		GPIO_ToggleBits(GPIOD, GPIO_Pin_14);
 8002510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <cortinasAutomaticas+0x1c>)
 8002516:	f7ff fecc 	bl	80022b2 <GPIO_ToggleBits>
		vTaskDelay(1000 / portTICK_RATE_MS);
 800251a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800251e:	f7fe fbcd 	bl	8000cbc <vTaskDelay>
		GPIO_ToggleBits(GPIOD, GPIO_Pin_14);
 8002522:	e7f5      	b.n	8002510 <cortinasAutomaticas+0x8>
 8002524:	40020c00 	.word	0x40020c00

08002528 <preparacaoCafe>:
		 * Modifica a abertura dos cortinas para uma determinada quantidade de iluminação.
		 *
		 * */
	}
}
void preparacaoCafe(void *pvParameters){
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	while(1){
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == 1){
 8002530:	2101      	movs	r1, #1
 8002532:	4807      	ldr	r0, [pc, #28]	; (8002550 <preparacaoCafe+0x28>)
 8002534:	f7ff fea3 	bl	800227e <GPIO_ReadInputDataBit>
 8002538:	4603      	mov	r3, r0
 800253a:	2b01      	cmp	r3, #1
 800253c:	d104      	bne.n	8002548 <preparacaoCafe+0x20>
			GPIO_ToggleBits(GPIOD, GPIO_Pin_15);
 800253e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002542:	4804      	ldr	r0, [pc, #16]	; (8002554 <preparacaoCafe+0x2c>)
 8002544:	f7ff feb5 	bl	80022b2 <GPIO_ToggleBits>
		}
		vTaskDelay(100 / portTICK_RATE_MS);
 8002548:	2064      	movs	r0, #100	; 0x64
 800254a:	f7fe fbb7 	bl	8000cbc <vTaskDelay>
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == 1){
 800254e:	e7ef      	b.n	8002530 <preparacaoCafe+0x8>
 8002550:	40020000 	.word	0x40020000
 8002554:	40020c00 	.word	0x40020c00

08002558 <initGPIO>:
		 *
		 * */
	}
}
//
void initGPIO(){
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;    
  // Init LED
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800255e:	2101      	movs	r1, #1
 8002560:	2008      	movs	r0, #8
 8002562:	f7ff feb9 	bl	80022d8 <RCC_AHB1PeriphClockCmd>
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002566:	2301      	movs	r3, #1
 8002568:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 800256a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800256e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002574:	2303      	movs	r3, #3
 8002576:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002578:	2300      	movs	r3, #0
 800257a:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 800257c:	463b      	mov	r3, r7
 800257e:	4619      	mov	r1, r3
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <initGPIO+0x38>)
 8002582:	f7ff fded 	bl	8002160 <GPIO_Init>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40020c00 	.word	0x40020c00

08002594 <initBUTTON>:
void initBUTTON(){
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	// Enable the BUTTON Clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800259a:	2101      	movs	r1, #1
 800259c:	2001      	movs	r0, #1
 800259e:	f7ff fe9b 	bl	80022d8 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80025a2:	2101      	movs	r1, #1
 80025a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025a8:	f7ff feb6 	bl	8002318 <RCC_APB2PeriphClockCmd>
	// Configure Button pin as input
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80025ac:	2300      	movs	r3, #0
 80025ae:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 80025b4:	2301      	movs	r3, #1
 80025b6:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80025b8:	463b      	mov	r3, r7
 80025ba:	4619      	mov	r1, r3
 80025bc:	4803      	ldr	r0, [pc, #12]	; (80025cc <initBUTTON+0x38>)
 80025be:	f7ff fdcf 	bl	8002160 <GPIO_Init>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40020000 	.word	0x40020000

080025d0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <HardFault_Handler+0x4>

080025e4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <MemManage_Handler+0x4>

080025ea <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <BusFault_Handler+0x4>

080025f0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <UsageFault_Handler+0x4>

080025f6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <SystemInit+0x50>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a11      	ldr	r2, [pc, #68]	; (8002654 <SystemInit+0x50>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <SystemInit+0x50>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <SystemInit+0x50>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <SystemInit+0x50>)
 8002620:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <SystemInit+0x50>)
 800262c:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <SystemInit+0x54>)
 800262e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <SystemInit+0x50>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a07      	ldr	r2, [pc, #28]	; (8002654 <SystemInit+0x50>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <SystemInit+0x50>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002642:	f000 f80d 	bl	8002660 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <SystemInit+0x58>)
 8002648:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800264c:	609a      	str	r2, [r3, #8]
#endif
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	24003010 	.word	0x24003010
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	2300      	movs	r3, #0
 800266c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <SetSysClock+0xe8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a35      	ldr	r2, [pc, #212]	; (8002748 <SetSysClock+0xe8>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800267a:	4b33      	ldr	r3, [pc, #204]	; (8002748 <SetSysClock+0xe8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3301      	adds	r3, #1
 8002688:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d103      	bne.n	8002698 <SetSysClock+0x38>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002696:	d1f0      	bne.n	800267a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <SetSysClock+0xe8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80026a4:	2301      	movs	r3, #1
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	e001      	b.n	80026ae <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80026aa:	2300      	movs	r3, #0
 80026ac:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d142      	bne.n	800273a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <SetSysClock+0xe8>)
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	4a23      	ldr	r2, [pc, #140]	; (8002748 <SetSysClock+0xe8>)
 80026ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026be:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <SetSysClock+0xec>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a21      	ldr	r2, [pc, #132]	; (800274c <SetSysClock+0xec>)
 80026c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ca:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <SetSysClock+0xe8>)
 80026ce:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <SetSysClock+0xe8>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80026d4:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <SetSysClock+0xe8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a1b      	ldr	r2, [pc, #108]	; (8002748 <SetSysClock+0xe8>)
 80026da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026de:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <SetSysClock+0xe8>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a18      	ldr	r2, [pc, #96]	; (8002748 <SetSysClock+0xe8>)
 80026e6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80026ea:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <SetSysClock+0xe8>)
 80026ee:	4a18      	ldr	r2, [pc, #96]	; (8002750 <SetSysClock+0xf0>)
 80026f0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <SetSysClock+0xe8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a14      	ldr	r2, [pc, #80]	; (8002748 <SetSysClock+0xe8>)
 80026f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026fc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80026fe:	bf00      	nop
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <SetSysClock+0xe8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f9      	beq.n	8002700 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <SetSysClock+0xf4>)
 800270e:	f240 6205 	movw	r2, #1541	; 0x605
 8002712:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <SetSysClock+0xe8>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <SetSysClock+0xe8>)
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <SetSysClock+0xe8>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a08      	ldr	r2, [pc, #32]	; (8002748 <SetSysClock+0xe8>)
 8002726:	f043 0302 	orr.w	r3, r3, #2
 800272a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800272c:	bf00      	nop
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <SetSysClock+0xe8>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b08      	cmp	r3, #8
 8002738:	d1f9      	bne.n	800272e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40007000 	.word	0x40007000
 8002750:	07405408 	.word	0x07405408
 8002754:	40023c00 	.word	0x40023c00

08002758 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002758:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800275a:	e003      	b.n	8002764 <LoopCopyDataInit>

0800275c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 800275e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002760:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002762:	3104      	adds	r1, #4

08002764 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002764:	4809      	ldr	r0, [pc, #36]	; (800278c <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 8002768:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800276a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800276c:	d3f6      	bcc.n	800275c <CopyDataInit>
  ldr  r2, =_sbss
 800276e:	4a09      	ldr	r2, [pc, #36]	; (8002794 <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 8002770:	e002      	b.n	8002778 <LoopFillZerobss>

08002772 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002772:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002774:	f842 3b04 	str.w	r3, [r2], #4

08002778 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <LoopFillZerobss+0x20>)
  cmp  r2, r3
 800277a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800277c:	d3f9      	bcc.n	8002772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800277e:	f7ff ff41 	bl	8002604 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8002782:	f7ff fde9 	bl	8002358 <main>
  bx  lr    
 8002786:	4770      	bx	lr
  ldr  r3, =_sidata
 8002788:	0800283c 	.word	0x0800283c
  ldr  r0, =_sdata
 800278c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002790:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002794:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002798:	20012dac 	.word	0x20012dac

0800279c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800279c:	e7fe      	b.n	800279c <ADC_IRQHandler>

0800279e <memcpy>:
 800279e:	440a      	add	r2, r1
 80027a0:	4291      	cmp	r1, r2
 80027a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80027a6:	d100      	bne.n	80027aa <memcpy+0xc>
 80027a8:	4770      	bx	lr
 80027aa:	b510      	push	{r4, lr}
 80027ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027b4:	4291      	cmp	r1, r2
 80027b6:	d1f9      	bne.n	80027ac <memcpy+0xe>
 80027b8:	bd10      	pop	{r4, pc}

080027ba <memset>:
 80027ba:	4402      	add	r2, r0
 80027bc:	4603      	mov	r3, r0
 80027be:	4293      	cmp	r3, r2
 80027c0:	d100      	bne.n	80027c4 <memset+0xa>
 80027c2:	4770      	bx	lr
 80027c4:	f803 1b01 	strb.w	r1, [r3], #1
 80027c8:	e7f9      	b.n	80027be <memset+0x4>
	...

080027cc <_init>:
 80027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ce:	bf00      	nop
 80027d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d2:	bc08      	pop	{r3}
 80027d4:	469e      	mov	lr, r3
 80027d6:	4770      	bx	lr

080027d8 <_fini>:
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027da:	bf00      	nop
 80027dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027de:	bc08      	pop	{r3}
 80027e0:	469e      	mov	lr, r3
 80027e2:	4770      	bx	lr
